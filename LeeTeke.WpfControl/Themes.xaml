<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:LeeTeke.WpfControl.Controls"
    xmlns:lee="clr-namespace:LeeTeke.WpfControl.Controls"
    xmlns:leedep="clr-namespace:LeeTeke.WpfControl.Dependencies"
    xmlns:local="clr-namespace:LeeTeke.WpfControl"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/LeeTeke.WpfControl;component/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="LeeGridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Gray}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Gray}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeScrollBarBaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeScrollBar" TargetType="{x:Type ScrollBar}">

        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Background" Value="{Binding Path=(leedep:ScrollViewerManager.TrackBrush), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">

                    <Track
                        x:Name="PART_Track"
                        IsDirectionReversed="true"
                        IsEnabled="{TemplateBinding IsMouseOver}">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource LeeScrollBarBaseRepeatButton}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource LeeScrollBarBaseRepeatButton}" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb>
                                <Thumb.Template>
                                    <ControlTemplate TargetType="Thumb">
                                        <Border
                                            x:Name="PART_Border"
                                            Background="{Binding Path=(leedep:ScrollViewerManager.ThumbBrush), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                            BorderThickness="0"
                                            CornerRadius="{Binding Path=(leedep:ScrollViewerManager.ScrollBarCornerRadius), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                            Effect="{Binding Path=(leedep:ScrollViewerManager.ScrollBarShadow), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=PART_Border, Path=ActualWidth, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=Less_4}" Value="True">
                                                <Setter TargetName="PART_Border" Property="CornerRadius" Value="2" />
                                            </DataTrigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </Track.Thumb>
                    </Track>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="0" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">

                            <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource LeeScrollBarBaseRepeatButton}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource LeeScrollBarBaseRepeatButton}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb>
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="Thumb">
                                                <Border
                                                    x:Name="PART_Border"
                                                    Background="{Binding Path=(leedep:ScrollViewerManager.ThumbBrush), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                                    BorderThickness="0"
                                                    CornerRadius="{Binding Path=(leedep:ScrollViewerManager.ScrollBarCornerRadius), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                                    Effect="{Binding Path=(leedep:ScrollViewerManager.ScrollBarShadow), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding ElementName=PART_Border, Path=ActualWidth, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=Less_4}" Value="True">
                                                        <Setter TargetName="PART_Border" Property="CornerRadius" Value="2" />
                                                    </DataTrigger>

                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>

                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                            </Track>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeScrollViewerBase" TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="leedep:ScrollViewerManager.TrackBrush" Value="Transparent" />
        <Setter Property="leedep:ScrollViewerManager.ThumbBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ScrollViewerManager.ScrollBarCornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEasingFunction" Value="{DynamicResource LeeValue_ScrollViewerSlideEasingFuncion}" />
        <Setter Property="leedep:ScrollViewerManager.SlideDuration" Value="{DynamicResource LeeValue_ScrollViewerSlideDuration}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEnabled" Value="{DynamicResource LeeValue_ScrollViewerSlideEnabled}" />
    </Style>

    <Style
        x:Key="LeeScrollViewerEx"
        BasedOn="{StaticResource LeeScrollViewerBase}"
        TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <Grid x:Name="PART_Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition />
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Rectangle
                                x:Name="Corner"
                                Grid.Row="2"
                                Grid.Column="2"
                                Fill="{Binding Path=(leedep:ScrollViewerManager.TrackBrush), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
                            <ContentPresenter
                                Grid.Row="0"
                                Grid.Column="1"
                                Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.TopContent), Mode=OneWay}" />
                            <ContentPresenter
                                Grid.Row="3"
                                Grid.Column="1"
                                Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.BottomContent), Mode=OneWay}" />
                            <ContentPresenter
                                Grid.Row="1"
                                Grid.Column="0"
                                Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.LeftContent), Mode=OneWay}" />
                            <ContentPresenter
                                Grid.Row="1"
                                Grid.Column="3"
                                Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.RightContent), Mode=OneWay}" />
                            <ScrollContentPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                VirtualizingStackPanel.IsVirtualizing="{Binding Path=(VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                VirtualizingStackPanel.VirtualizationMode="{Binding Path=(VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
                            <lee:EasyPanel
                                x:Name="PART_HorizontalBarPanel"
                                Grid.Row="2"
                                Height="{StaticResource LeeValue_ScrollViewerBarSize}"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                                <ScrollBar
                                    x:Name="PART_HorizontalScrollBar"
                                    Height="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                    VerticalAlignment="Bottom"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    Opacity="0"
                                    Orientation="Horizontal"
                                    Style="{StaticResource LeeScrollBar}"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Value="{TemplateBinding HorizontalOffset}" />
                            </lee:EasyPanel>

                            <lee:EasyPanel
                                x:Name="PART_VerticalBarPanel"
                                Grid.Column="2"
                                Width="{StaticResource LeeValue_ScrollViewerBarSize}"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                <ScrollBar
                                    x:Name="PART_VerticalScrollBar"
                                    Width="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                    HorizontalAlignment="Right"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    Opacity="0"
                                    Style="{StaticResource LeeScrollBar}"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    Value="{TemplateBinding VerticalOffset}" />
                            </lee:EasyPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_Grid" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding ElementName="PART_Border" Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <EventTrigger RoutedEvent="ScrollChanged">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_VerticalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Width"
                                        To="{StaticResource LeeValue_ScrollViewerBarSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_VerticalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Width"
                                        To="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                        Duration="0:0:0.15" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_HorizontalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Height"
                                        To="{StaticResource LeeValue_ScrollViewerBarSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_HorizontalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Height"
                                        To="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="LeeScrollViewer"
        BasedOn="{StaticResource LeeScrollViewerBase}"
        TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <Grid x:Name="PART_Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>

                            <Rectangle
                                x:Name="Corner"
                                Grid.Row="1"
                                Grid.Column="1"
                                Fill="{Binding Path=(leedep:ScrollViewerManager.TrackBrush), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />
                            <ScrollContentPresenter
                                Grid.Row="0"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                VirtualizingStackPanel.IsVirtualizing="{Binding Path=(VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}"
                                VirtualizingStackPanel.VirtualizationMode="{Binding Path=(VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType=ScrollViewer}, Mode=OneWay}" />

                            <lee:EasyPanel
                                x:Name="PART_HorizontalBarPanel"
                                Grid.Row="1"
                                Height="{StaticResource LeeValue_ScrollViewerBarSize}"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                                <ScrollBar
                                    x:Name="PART_HorizontalScrollBar"
                                    Height="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                    VerticalAlignment="Bottom"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    Opacity="0"
                                    Orientation="Horizontal"
                                    Style="{StaticResource LeeScrollBar}"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Value="{TemplateBinding HorizontalOffset}" />
                            </lee:EasyPanel>

                            <lee:EasyPanel
                                x:Name="PART_VerticalBarPanel"
                                Grid.Column="1"
                                Width="{StaticResource LeeValue_ScrollViewerBarSize}"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                <ScrollBar
                                    x:Name="PART_VerticalScrollBar"
                                    Width="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                    HorizontalAlignment="Right"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    Opacity="0"
                                    Style="{StaticResource LeeScrollBar}"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    Value="{TemplateBinding VerticalOffset}" />
                            </lee:EasyPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_Grid" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding ElementName="PART_Border" Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <EventTrigger RoutedEvent="ScrollChanged">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        BeginTime="0:0:1"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_VerticalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Width"
                                        To="{StaticResource LeeValue_ScrollViewerBarSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_VerticalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Width"
                                        To="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                        Duration="0:0:0.15" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter" SourceName="PART_HorizontalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Height"
                                        To="{StaticResource LeeValue_ScrollViewerBarSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave" SourceName="PART_HorizontalBarPanel">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Height"
                                        To="{StaticResource LeeValue_ScrollViewerBarMinSize}"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="1"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_VerticalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.15" />
                                    <DoubleAnimation
                                        BeginTime="0:0:2"
                                        Storyboard.TargetName="PART_HorizontalScrollBar"
                                        Storyboard.TargetProperty="Opacity"
                                        To="0"
                                        Duration="0:0:0.15" />

                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
    </Style>

    <Style x:Key="LeeFrame" TargetType="{x:Type Frame}">
        <Setter Property="NavigationUIVisibility" Value="Hidden" />
        <Setter Property="leedep:FrameManager.DisableNavigation" Value="True" />
    </Style>

    <Style x:Key="LeeBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
    </Style>

    <Style x:Key="LeeButtonBase" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="{DynamicResource LeeValue_BorderThickness}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="LeeButton"
        BasedOn="{StaticResource LeeButtonBase}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="leedep:ButtonManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <lee:EasyPanel x:Name="PART_EasyPanel">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                            <controls:RippleMask
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}"
                                IsOverflow="False"
                                ParentElement="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}"
                                RippleBrush="{Binding Path=(leedep:ButtonManager.RippleBrush), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                        </lee:EasyPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_EasyPanel" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeColorButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:ButtonManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="leedep:ButtonManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ButtonManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ButtonManager.MouseOverForeground" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                        <lee:EasyPanel x:Name="PART_EasyPanel" Background="Transparent">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                            <controls:RippleMask
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                                IsOverflow="False"
                                ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                RippleBrush="{Binding Path=(leedep:ButtonManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" />
                        </lee:EasyPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_EasyPanel" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_EasyPanel" Property="Background" Value="{Binding Path=(leedep:ButtonManager.MouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=(leedep:ButtonManager.MouseOverBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ButtonManager.MouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>


            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeTextButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="leedep:ButtonManager.MouseOverForeground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ButtonManager.PressedForeground" Value="{DynamicResource LeeBrush_BlueLink}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(leedep:ButtonManager.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ButtonManager.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=(leedep:ButtonManager.PressedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ButtonManager.PressedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:ButtonManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="leedep:ButtonManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ButtonManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ButtonManager.MouseOverForeground" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                        <lee:EasyPanel x:Name="PART_EasyPanel" Background="Transparent">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                            <controls:RippleMask
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                                IsOverflow="False"
                                ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                RippleBrush="{Binding Path=(leedep:ButtonManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" />
                        </lee:EasyPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_EasyPanel" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_EasyPanel" Property="Background" Value="{Binding Path=(leedep:ButtonManager.MouseOverBackground), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=(leedep:ButtonManager.MouseOverBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ButtonManager.MouseOverForeground), RelativeSource={RelativeSource AncestorType={x:Type Button}}, Mode=OneWay}" />
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>


            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:TextBoxManager.ActiveBackground" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="CaretBrush" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="Padding" Value="{StaticResource LeeValue_Padding}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="SelectionOpacity" Value="0.5" />
        <Setter Property="CaretBrush" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="ApplicationCommands.Cut" Header="剪切(_T) - Ctrl+X">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="{StaticResource IconFontFamily}" Text="&#xE8C6;" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ApplicationCommands.Copy" Header="复制(_C) - Ctrl+C">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="{StaticResource IconFontFamily}" Text="&#xE8C8;" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="ApplicationCommands.Paste" Header="粘贴(_P) - Ctrl+V">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="{StaticResource IconFontFamily}" Text="&#xE77F;" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                        leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        Style="{StaticResource LeeScrollViewer}"
                        VerticalScrollBarVisibility="Hidden" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsReadOnly" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:TextBoxManager.ActiveBackground)}" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ToggleButtonManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:ToggleButtonManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ToggleButtonManager.MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=BorderBrush, Mode=OneWay}" />
        <Setter Property="leedep:ToggleButtonManager.MouseOverBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=BorderThickness, Mode=OneWay}" />
        <Setter Property="leedep:ToggleButtonManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />

        <Setter Property="leedep:ToggleButtonManager.CheckedBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ToggleButtonManager.CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=BorderBrush, Mode=OneWay}" />
        <Setter Property="leedep:ToggleButtonManager.CheckedBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=BorderThickness, Mode=OneWay}" />
        <Setter Property="leedep:ToggleButtonManager.CheckedForeground" Value="{DynamicResource LeeBrush_ForgroundActive}" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                        <lee:EasyPanel x:Name="PART_EasyPanel" Background="Transparent">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                            <ContentPresenter
                                x:Name="Checked_ContentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}, Path=(leedep:ToggleButtonManager.CheckedContent)}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                TextElement.Foreground="{Binding ElementName=contentPresenter, Path=(TextElement.Foreground)}"
                                Visibility="Collapsed" />
                            <controls:RippleMask
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                IsOverflow="False"
                                ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                RippleBrush="{Binding Path=(leedep:ToggleButtonManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </lee:EasyPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_EasyPanel" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding Path=(leedep:ToggleButtonManager.MouseOverBackground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=(leedep:ToggleButtonManager.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding Path=(leedep:ToggleButtonManager.MouseOverBorderThickness), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ToggleButtonManager.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:ToggleButtonManager.HaveCheckedContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked_ContentPresenter" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding Path=(leedep:ToggleButtonManager.CheckedBackground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding Path=(leedep:ToggleButtonManager.CheckedBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding Path=(leedep:ToggleButtonManager.CheckedBorderThickness), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding Path=(leedep:ToggleButtonManager.CheckedForeground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="RotateToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Content" Value="&#xe70d;" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{StaticResource IconFontFamily}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="leedep:ToggleButtonManager.RotateMode" Value="Positive180" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter
                            x:Name="PART_Content"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.RenderTransform>
                                <RotateTransform x:Name="PART_Angle" Angle="0" />
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:ToggleButtonManager.RotateMode" Value="Positive180" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:ToggleButtonManager.RotateMode" Value="Positive90" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="90">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:ToggleButtonManager.RotateMode" Value="Negative180" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:ToggleButtonManager.RotateMode" Value="Negative90" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-90">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Angle" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <SineEase EasingMode="EaseIn" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeToolTip" TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />

        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Effect" Value="{StaticResource LeeShadow1}" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <ContentPresenter
                            x:Name="PART_Content"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_Content" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeePasswordBox" TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:TextBoxManager.ActiveBackground" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="CaretBrush" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="{DynamicResource LeeValue_Padding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="SelectionOpacity" Value="0.5" />
        <Setter Property="CaretBrush" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="ApplicationCommands.Paste" Header="粘贴(_P) - Ctrl+V">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="{StaticResource IconFontFamily}" Text="&#xE77F;" />
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                        leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        Style="{StaticResource LeeScrollViewer}"
                        VerticalScrollBarVisibility="Hidden" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:TextBoxManager.ActiveBackground)}" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="leedep:RadioButtonManager.MarkBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:RadioButtonManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:RadioButtonManager.MarkSize" Value="15" />
        <Setter Property="leedep:RadioButtonManager.MarkMargin" Value="2" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="Padding" Value="{StaticResource LeeValue_Padding}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <controls:RippleMask
                            IsOverflow="True"
                            ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            RippleBrush="{Binding Path=(leedep:RadioButtonManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                        <Border
                            x:Name="radioButtonBorder"
                            Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:RadioButtonManager.MarkSize), Mode=OneWay}"
                            Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:RadioButtonManager.MarkSize), Mode=OneWay}"
                            Margin="2,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight, Converter={StaticResource DoubleFollowConverter}, ConverterParameter=/2, Mode=OneWay}">
                            <Ellipse
                                x:Name="optionMark"
                                Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:RadioButtonManager.MarkMargin), Mode=OneWay}"
                                Fill="{Binding Path=(leedep:RadioButtonManager.MarkBrush), RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}, Mode=OneWay}"
                                RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform x:Name="markST" ScaleX="0" ScaleY="0" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Border>

                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{DynamicResource LeeBrush_Gray200}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="markST"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="1"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetName="markST"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="1"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="markST"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Storyboard.TargetName="markST"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <BackEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeSlider" TargetType="{x:Type Slider}">
        <Setter Property="FontSize" Value="{DynamicResource LeeValue_FontSize}" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="TickPlacement" Value="None" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="AutoToolTipPlacement" Value="None" />
        <Setter Property="AutoToolTipPrecision" Value="0" />
        <Setter Property="leedep:SliderManager.Header" Value="{x:Null}" />
        <Setter Property="leedep:SliderManager.HeaderDock" Value="Top" />
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="Height" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:SliderManager.TrackSize" Value="8" />
        <Setter Property="leedep:SliderManager.RegisterMouseWheel" Value="True" />
        <Setter Property="leedep:SliderManager.TrackBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:SliderManager.TrackThumbStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Thumb}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <ControlTemplate.Resources>
                                    <QuarticEase x:Key="Easing" EasingMode="EaseOut" />
                                </ControlTemplate.Resources>
                                <Border
                                    x:Name="PART_Border"
                                    Width="18"
                                    Height="18"
                                    Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type Slider}}, Path=Background, Mode=OneWay}"
                                    BorderThickness="0"
                                    CornerRadius="8"
                                    Effect="{StaticResource LeeShadow}">
                                    <Ellipse
                                        x:Name="PART_Ellipse"
                                        Width="10"
                                        Height="10"
                                        VerticalAlignment="Center"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type Slider}}, Path=(leedep:SliderManager.TrackBrush), Mode=OneWay}"
                                        IsHitTestVisible="False" />
                                </Border>
                                <ControlTemplate.Triggers>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True" />
                                            <Condition Property="IsDragging" Value="False" />
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Width">
                                                        <EasingDoubleKeyFrame
                                                            EasingFunction="{StaticResource Easing}"
                                                            KeyTime="0:0:0.2"
                                                            Value="14" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Height">
                                                        <EasingDoubleKeyFrame
                                                            EasingFunction="{StaticResource Easing}"
                                                            KeyTime="0:0:0.2"
                                                            Value="14" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>

                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Width">
                                                        <EasingDoubleKeyFrame
                                                            EasingFunction="{StaticResource Easing}"
                                                            KeyTime="0:0:0.2"
                                                            Value="10" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="Height">
                                                        <EasingDoubleKeyFrame
                                                            EasingFunction="{StaticResource Easing}"
                                                            KeyTime="0:0:0.2"
                                                            Value="10" />
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                    </MultiTrigger>

                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource Mode=Self}}" Value="Horizontal">
                <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
                <Setter Property="MinWidth" Value="{DynamicResource LeeControlMinWidth}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <DockPanel Background="Transparent">
                                <ContentPresenter
                                    x:Name="ContentHeader"
                                    Content="{Binding Path=(leedep:SliderManager.Header), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                    DockPanel.Dock="{Binding Path=(leedep:SliderManager.HeaderDock), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}" />
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <TickBar
                                        x:Name="TopTick"
                                        Height="5"
                                        Margin="0,0,0,0"
                                        VerticalAlignment="Top"
                                        Fill="{TemplateBinding Foreground}"
                                        FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                                        Placement="Top" />
                                    <Border
                                        x:Name="PART_Border"
                                        Grid.Row="1"
                                        Height="{Binding Path=(leedep:SliderManager.TrackSize), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                        VerticalAlignment="Center"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}" />
                                    <Track
                                        x:Name="PART_Track"
                                        Grid.Row="1"
                                        FocusVisualStyle="{TemplateBinding FocusVisualStyle}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton
                                                Height="{Binding Path=(leedep:SliderManager.TrackSize), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                                VerticalAlignment="Center"
                                                leedep:CornerRadiusManager.CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay, Converter={StaticResource CornerRadiusConverter}, ConverterParameter='0,N,N,0'}"
                                                Background="{Binding Path=(leedep:SliderManager.TrackBrush), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='0,0,N,0'}"
                                                Command="Slider.DecreaseLarge"
                                                Style="{StaticResource SliderRepeatButton}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb
                                                Background="Transparent"
                                                Foreground="{TemplateBinding Foreground}"
                                                Style="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:SliderManager.TrackThumbStyle), Mode=OneWay}" />
                                        </Track.Thumb>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton
                                                Background="Transparent"
                                                BorderThickness="0"
                                                Command="Slider.IncreaseLarge"
                                                Style="{StaticResource SliderRepeatButton}" />
                                        </Track.IncreaseRepeatButton>

                                    </Track>

                                    <TickBar
                                        x:Name="BottomTick"
                                        Grid.Row="2"
                                        Height="5"
                                        Margin="0,1,0,0"
                                        VerticalAlignment="Top"
                                        Fill="{TemplateBinding Foreground}"
                                        Placement="Bottom" />
                                </Grid>
                            </DockPanel>
                            <ControlTemplate.Triggers>

                                <Trigger Property="TickPlacement" Value="None">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource Mode=Self}}" Value="Vertical">
                <Setter Property="MinWidth" Value="{StaticResource LeeValue_MinHeight}" />
                <Setter Property="MinHeight" Value="{DynamicResource LeeControlMinWidth}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <DockPanel Background="Transparent">
                                <ContentPresenter
                                    x:Name="ContentHeader"
                                    Content="{Binding Path=(leedep:SliderManager.Header), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                    DockPanel.Dock="{Binding Path=(leedep:SliderManager.HeaderDock), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}" />
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TickBar
                                        x:Name="TopTick"
                                        Width="5"
                                        Margin="0,0,0,0"
                                        HorizontalAlignment="Left"
                                        Fill="{TemplateBinding Foreground}"
                                        Placement="Left" />
                                    <Border
                                        x:Name="PART_Border"
                                        Grid.Column="1"
                                        Width="{Binding Path=(leedep:SliderManager.TrackSize), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                        HorizontalAlignment="Center"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}" />
                                    <Track
                                        x:Name="PART_Track"
                                        Grid.Column="1"
                                        Margin="0,0,0,0">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton
                                                Width="{Binding Path=(leedep:SliderManager.TrackSize), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                                HorizontalAlignment="Center"
                                                leedep:CornerRadiusManager.CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay, Converter={StaticResource CornerRadiusConverter}, ConverterParameter='N,N,0,0'}"
                                                Background="{Binding Path=(leedep:SliderManager.TrackBrush), RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource AncestorType=Slider}, Mode=OneWay, Converter={StaticResource ThicknessConverter}, ConverterParameter='0,N,0,0'}"
                                                Command="Slider.DecreaseLarge"
                                                Style="{StaticResource SliderRepeatButton}" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb
                                                Background="Transparent"
                                                Foreground="{TemplateBinding Foreground}"
                                                Style="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:SliderManager.TrackThumbStyle), Mode=OneWay}" />
                                        </Track.Thumb>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton
                                                Background="Transparent"
                                                BorderThickness="0"
                                                Command="Slider.IncreaseLarge"
                                                Style="{StaticResource SliderRepeatButton}" />
                                        </Track.IncreaseRepeatButton>
                                    </Track>
                                    <TickBar
                                        x:Name="BottomTick"
                                        Grid.Column="2"
                                        Width="5"
                                        Margin="0,0,0,0"
                                        HorizontalAlignment="Right"
                                        Fill="{TemplateBinding Foreground}"
                                        Placement="Right" />
                                </Grid>
                            </DockPanel>
                            <ControlTemplate.Triggers>

                                <Trigger Property="TickPlacement" Value="None">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="TopLeft">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="BottomRight">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="TickPlacement" Value="Both">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeCalendarDayButton" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FontSize" Value="{DynamicResource LeeValue_FontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight, Mode=OneWay, Converter={StaticResource DoubleFollowConverter}, ConverterParameter=/2}" />
        <Setter Property="leedep:CalendarManager.TitleTextBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Calendar}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">

                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <ContentPresenter
                            x:Name="PART_Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Mark}" />
                        </Trigger>


                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Mark}" />
                        </Trigger>

                        <Trigger Property="IsToday" Value="True">
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource LeeBrush_Theme}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
                        </Trigger>

                        <Trigger Property="IsBlackedOut" Value="True">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.1" />
                        </Trigger>

                        <Trigger Property="IsInactive" Value="True">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.1" />
                        </Trigger>


                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeCalendarButton" TargetType="{x:Type CalendarButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="FontSize" Value="{DynamicResource LeeValue_FontSize}" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Height" Value="32" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualHeight, Mode=OneWay, Converter={StaticResource DoubleFollowConverter}, ConverterParameter=/2}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                        <ContentPresenter
                            x:Name="PART_Content"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Mark}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Mark}" />
                        </Trigger>
                        <Trigger Property="HasSelectedDays" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
                        </Trigger>

                        <Trigger Property="IsInactive" Value="True">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.7" />
                        </Trigger>




                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeCalendarItem" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="leedep:CalendarManager.TitleBackground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Calendar}}, Path=(leedep:CalendarManager.TitleBackground), Mode=OneWay}" />
        <Setter Property="leedep:CalendarManager.TitleTextBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Calendar}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarItem">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock
                                Margin="0,6,0,6"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}"
                                Text="{Binding}" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Rectangle
                                Grid.ColumnSpan="3"
                                Margin="0,0,0,0"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleBackground), Mode=OneWay}" />
                            <Rectangle
                                Grid.Row="1"
                                Grid.ColumnSpan="3"
                                Height="{Binding ElementName=PART_HeadRow, Path=ActualHeight}"
                                Margin="0,0,0,0"
                                VerticalAlignment="Top"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleBackground), Mode=OneWay}"
                                Visibility="{Binding ElementName=PART_MonthView, Path=Visibility, Mode=OneWay}" />
                            <Button
                                x:Name="PART_HeaderButton"
                                Grid.Row="0"
                                Grid.Column="0"
                                Background="Transparent"
                                BorderThickness="0"
                                Cursor="Hand"
                                Focusable="False"
                                FontSize="20"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}" />

                            <Button
                                x:Name="PART_PreviousButton"
                                Grid.Row="0"
                                Grid.Column="1"
                                Width="50"
                                Height="50"
                                Padding="16"
                                HorizontalAlignment="Left"
                                Background="Transparent"
                                BorderThickness="0"
                                Content="&#xE70E;"
                                Cursor="Hand"
                                Focusable="False"
                                FontFamily="{StaticResource IconFontFamily}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}" />

                            <Button
                                x:Name="PART_NextButton"
                                Grid.Row="0"
                                Grid.Column="2"
                                Width="50"
                                Height="50"
                                Padding="16"
                                HorizontalAlignment="Right"
                                Background="Transparent"
                                BorderThickness="0"
                                Content="&#xE70D;"
                                Cursor="Hand"
                                Focusable="False"
                                FontFamily="{StaticResource IconFontFamily}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type CalendarItem}}, Path=(leedep:CalendarManager.TitleTextBrush), Mode=OneWay}" />


                            <Grid
                                x:Name="PART_MonthView"
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Width="240"
                                Height="240"
                                Margin="10,0,10,10"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Visibility="Visible">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="PART_HeadRow" />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                            <Grid
                                x:Name="PART_YearView"
                                Grid.Row="1"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Width="240"
                                Height="240"
                                Margin="10,0,10,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Visibility="Hidden">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PART_DisabledVisual"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource AncestorType=Calendar}}" Value="Year">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource AncestorType=Calendar}}" Value="Decade">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeCalendar" TargetType="{x:Type Calendar}">

        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Language" Value="zh-cn" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource LeeCalendarDayButton}" />
        <Setter Property="CalendarButtonStyle" Value="{StaticResource LeeCalendarButton}" />
        <Setter Property="CalendarItemStyle" Value="{StaticResource LeeCalendarItem}" />
        <Setter Property="leedep:CalendarManager.TitleBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:CalendarManager.TitleTextBrush" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <lee:EasyPanel>
                        <Border
                            x:Name="PART_Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource LeeShadow}" />
                        <CalendarItem x:Name="PART_CalendarItem" Style="{TemplateBinding CalendarItemStyle}" />
                    </lee:EasyPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_CalendarItem" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LeeCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="leedep:CheckBoxManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CheckBoxManager.CheckBoxSize" Value="18" />
        <Setter Property="leedep:CheckBoxManager.SwtichFill" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="Padding" Value="{DynamicResource LeeValue_Padding}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardCheckedTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.StrokeDashOffset)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardCheckedFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.StrokeDashOffset)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <controls:RippleMask
                            IsOverflow="True"
                            ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            RippleBrush="{Binding Path=(leedep:CheckBoxManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" />
                        <Border
                            x:Name="PART_Border"
                            Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CheckBoxManager.CheckBoxSize), Mode=OneWay}"
                            Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CheckBoxManager.CheckBoxSize), Mode=OneWay}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
                            <lee:EasyPanel>
                                <Viewbox Margin="3">
                                    <Path
                                        x:Name="path"
                                        Width="12"
                                        Height="12"
                                        Data="M 0,2 3,5 8,0"
                                        FlowDirection="LeftToRight"
                                        Stretch="Uniform"
                                        Stroke="White"
                                        StrokeDashArray="8,8"
                                        StrokeDashOffset="8"
                                        StrokeThickness="2"
                                        UseLayoutRounding="True" />
                                </Viewbox>
                                <Rectangle
                                    x:Name="PART_CheckedNull"
                                    Margin="1"
                                    Fill="{DynamicResource LeeBrush_Theme}"
                                    Visibility="Collapsed">
                                    <Rectangle.Clip>
                                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                            <Binding
                                                Mode="OneWay"
                                                Path="ActualWidth"
                                                RelativeSource="{RelativeSource Mode=Self}" />
                                            <Binding
                                                Mode="OneWay"
                                                Path="ActualHeight"
                                                RelativeSource="{RelativeSource Mode=Self}" />
                                            <Binding
                                                ElementName="PART_Border"
                                                Mode="OneWay"
                                                Path="CornerRadius" />
                                            <Binding
                                                ElementName="PART_Border"
                                                Mode="OneWay"
                                                Path="BorderThickness" />
                                        </MultiBinding>
                                    </Rectangle.Clip>
                                </Rectangle>
                            </lee:EasyPanel>

                        </Border>


                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True" />

                        <ContentPresenter
                            x:Name="Checked_ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.CheckedContent)}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            Visibility="Collapsed" />


                    </Grid>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.9" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
                            </Trigger.ExitActions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.SwtichFill), Mode=OneWay}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="PART_CheckedNull" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:CheckBoxManager.HaveCheckedContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked_ContentPresenter" Property="Visibility" Value="Visible" />
                        </MultiTrigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeSwitchCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="leedep:CheckBoxManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CheckBoxManager.CheckBoxSize" Value="18" />
        <Setter Property="leedep:CheckBoxManager.SwtichFill" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="Padding" Value="{StaticResource LeeValue_Padding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardCheckedTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipseTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="20" />
                            </DoubleAnimationUsingKeyFrames>


                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleX">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleY">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="StoryboardCheckedFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipseTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>


                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleX">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleY">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid ClipToBounds="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox
                            Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CheckBoxManager.CheckBoxSize), Mode=OneWay}"
                            Margin="3"
                            ClipToBounds="False">
                            <lee:EasyPanel ClipToBounds="False">
                                <Border
                                    x:Name="PART_CheckedTrue"
                                    Width="40"
                                    Height="20"
                                    VerticalAlignment="Center"
                                    Background="{DynamicResource LeeBrush_Theme}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="10" />
                                <Border
                                    x:Name="PART_CheckedFalse"
                                    Width="40"
                                    Height="20"
                                    VerticalAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="10"
                                    RenderTransformOrigin="1,0.5">
                                    <Border.RenderTransform>
                                        <ScaleTransform x:Name="PART_CheckedFalseST" ScaleX="1" ScaleY="1" />
                                    </Border.RenderTransform>
                                </Border>

                                <Ellipse
                                    x:Name="PART_Ellipse"
                                    Width="22"
                                    Height="22"
                                    HorizontalAlignment="Left"
                                    Effect="{StaticResource LeeShadow2}"
                                    Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.SwtichFill), Mode=OneWay}"
                                    RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="PART_EllipseTT" X="0" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>

                            </lee:EasyPanel>
                        </Viewbox>


                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True" />

                        <ContentPresenter
                            x:Name="Checked_ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.CheckedContent), Mode=OneWay}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            Visibility="Collapsed" />


                    </Grid>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}"/>-->
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.9" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="PART_CheckedFalse" Property="BorderThickness" Value="1" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderThickness" Value="4" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
                            </Trigger.ExitActions>
                            <Setter TargetName="PART_CheckedFalse" Property="BorderThickness" Value="0" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderThickness" Value="1" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="PART_CheckedFalse" Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
                            <Setter TargetName="PART_Ellipse" Property="Opacity" Value="0" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:CheckBoxManager.HaveCheckedContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked_ContentPresenter" Property="Visibility" Value="Visible" />
                        </MultiTrigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LeeSwitchTagCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="{DynamicResource LeeBrush_ForgroundActive}" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="leedep:CheckBoxManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:CheckBoxManager.CheckBoxSize" Value="18" />
        <Setter Property="leedep:CheckBoxManager.SwtichFill" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="Padding" Value="{StaticResource LeeValue_Padding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardCheckedTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipseTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="20" />
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EasyPanelTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="20" />
                            </DoubleAnimationUsingKeyFrames>


                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleX">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleY">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="StoryboardCheckedFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EllipseTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_EasyPanelTT" Storyboard.TargetProperty="X">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="0" />
                            </DoubleAnimationUsingKeyFrames>


                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleX">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_CheckedFalseST" Storyboard.TargetProperty="ScaleY">
                                <EasingDoubleKeyFrame
                                    EasingFunction="{StaticResource LeeValue_SwitchEasingFunction}"
                                    KeyTime="0:0:0.3"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Viewbox
                        Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CheckBoxManager.CheckBoxSize), Mode=OneWay}"
                        Margin="3"
                        ClipToBounds="False">
                        <lee:EasyPanel ClipToBounds="False">
                            <Border
                                x:Name="PART_CheckedTrue"
                                Width="40"
                                Height="20"
                                VerticalAlignment="Center"
                                Background="{DynamicResource LeeBrush_Theme}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="10" />
                            <Border
                                x:Name="PART_CheckedFalse"
                                Width="40"
                                Height="20"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="10"
                                RenderTransformOrigin="1,0.5">
                                <Border.RenderTransform>
                                    <ScaleTransform x:Name="PART_CheckedFalseST" ScaleX="1" ScaleY="1" />
                                </Border.RenderTransform>
                            </Border>


                            <Ellipse
                                x:Name="PART_Ellipse"
                                Width="22"
                                Height="22"
                                HorizontalAlignment="Left"
                                Effect="{StaticResource LeeShadow2}"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.SwtichFill), Mode=OneWay}"
                                RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform x:Name="PART_EllipseTT" X="0" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <lee:EasyPanel
                                Width="22"
                                Height="22"
                                HorizontalAlignment="Left"
                                leedep:ClipManager.CornerRadius="12"
                                Background="{x:Null}"
                                ClipToBounds="True"
                                RenderTransformOrigin="0.5,0.5">
                                <lee:EasyPanel.RenderTransform>
                                    <TranslateTransform x:Name="PART_EasyPanelTT" X="0" />
                                </lee:EasyPanel.RenderTransform>

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Focusable="False"
                                    RecognizesAccessKey="True" />

                                <ContentPresenter
                                    x:Name="Checked_ContentPresenter"
                                    Grid.Column="1"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type CheckBox}}, Path=(leedep:CheckBoxManager.CheckedContent), Mode=OneWay}"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    Visibility="Collapsed" />
                            </lee:EasyPanel>
                        </lee:EasyPanel>
                    </Viewbox>


                    <ControlTemplate.Triggers>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrushMouseOver}"/>-->
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.9" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="PART_CheckedFalse" Property="BorderThickness" Value="1" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderThickness" Value="4" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderBrush" Value="{x:Null}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
                            </Trigger.ExitActions>
                            <Setter TargetName="PART_CheckedFalse" Property="BorderThickness" Value="0" />
                            <Setter TargetName="PART_CheckedTrue" Property="BorderThickness" Value="1" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="PART_CheckedFalse" Property="Background" Value="{DynamicResource LeeBrush_Theme}" />
                            <Setter TargetName="PART_Ellipse" Property="Opacity" Value="0" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="leedep:CheckBoxManager.HaveCheckedContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Checked_ContentPresenter" Property="Visibility" Value="Visible" />
                        </MultiTrigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">

                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        Style="{StaticResource LeeScrollViewer}"
                        VerticalScrollBarVisibility="Hidden" />


                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <!--  常规属性  -->
        <Setter Property="Height" Value="{Binding Path=(leedep:ComboBoxManager.ItemHeight), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        x:Name="PART_Border"
                        Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                        Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                        BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                        BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                        CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                        Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}">
                        <DockPanel x:Name="PART_DockPanel">

                            <Rectangle
                                x:Name="PART_Mark"
                                Margin="{Binding Path=(leedep:ComboBoxManager.MarkMargin), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                                DockPanel.Dock="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSite), Mode=OneWay}"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkBrush), Mode=OneWay}"
                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkShow), Mode=OneWay, Converter={StaticResource VisibilityForBoolConverter}}">
                                <Rectangle.Clip>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="(leedep:ComboBoxManager.MarkCornerRadius)"
                                            RelativeSource="{RelativeSource AncestorType={x:Type ComboBox}}" />

                                    </MultiBinding>
                                </Rectangle.Clip>
                            </Rectangle>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(leedep:ListItemManager.IsClip), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="True">
                            <Setter TargetName="contentPresenter" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(leedep:ComboBoxManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="Left">
                            <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:ComboBoxManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="Right">
                            <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:ComboBoxManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="Top">
                            <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:ComboBoxManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="Bottom">
                            <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkMouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding Path=(leedep:ListItemManager.ActivateSelectedStyle), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkMouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding Path=(leedep:ListItemManager.ActivateSelectedStyle), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ComboBoxManager.MarkSelectedBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeComboBox" TargetType="{x:Type ComboBox}">

        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />

        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="True" />

        <Setter Property="ItemContainerStyle" Value="{DynamicResource LeeComboBoxItem}" />

        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />

        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />


        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ComboBoxManager.EscToEmpty" Value="True" />
        <Setter Property="leedep:ComboBoxManager.PlaceholderVisibility" Value="True" />
        <Setter Property="leedep:ComboBoxManager.Placeholder" Value="--请选择--" />
        <Setter Property="leedep:ComboBoxManager.ItemHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="leedep:ComboBoxManager.IsDropCenterOnControl" Value="False" />
        <Setter Property="leedep:ComboBoxManager.DropBackground" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="leedep:ComboBoxManager.DropCornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ComboBoxManager.DropIsClip" Value="True" />
        <Setter Property="leedep:ComboBoxManager.DropPadding" Value="0,5" />
        <Setter Property="leedep:ComboBoxManager.DropEffect" Value="{StaticResource LeeShadow}" />
        <!--  常规属性  -->
        <Setter Property="leedep:ListItemManager.Background" Value="Transparent" />
        <Setter Property="leedep:ListItemManager.BorderBrush" Value="{x:Null}" />
        <Setter Property="leedep:ListItemManager.BorderThickness" Value="0" />
        <Setter Property="leedep:ListItemManager.Marigin" Value="2,0.5" />
        <Setter Property="leedep:ListItemManager.Padding" Value="0" />
        <Setter Property="leedep:ListItemManager.Effect" Value="{x:Null}" />

        <!--  MouseOver  -->
        <Setter Property="leedep:ListItemManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Selected  -->
        <Setter Property="leedep:ListItemManager.ActivateSelectedStyle" Value="True" />
        <Setter Property="leedep:ListItemManager.SelectedBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Item的cornerRadius  -->
        <Setter Property="leedep:ListItemManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ListItemManager.IsClip" Value="True" />

        <!--  Mark  -->
        <Setter Property="leedep:ComboBoxManager.MarkShow" Value="True" />
        <Setter Property="leedep:ComboBoxManager.MarkBrush" Value="{x:Null}" />
        <Setter Property="leedep:ComboBoxManager.MarkCornerRadius" Value="2" />
        <Setter Property="leedep:ComboBoxManager.MarkMargin" Value="0,8,4,8" />
        <Setter Property="leedep:ComboBoxManager.MarkMouseOverBrush" Value="{x:Null}" />
        <Setter Property="leedep:ComboBoxManager.MarkSelectedBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ComboBoxManager.MarkSite" Value="Left" />
        <Setter Property="leedep:ComboBoxManager.MarkSize" Value="4" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}">
                        <lee:EasyPanel x:Name="templateRoot">

                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="True"
                                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Bottom"
                                PopupAnimation="Fade">
                                <lee:EasyPanel
                                    x:Name="PART_DropPabnel"
                                    Margin="8"
                                    Background="Transparent">
                                    <ScrollViewer
                                        x:Name="DropDownScrollViewer"
                                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropMargin), Mode=OneWay}"
                                        Padding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropPadding), Mode=OneWay}"
                                        leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropCornerRadius), Mode=OneWay}"
                                        leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropIsClip), Mode=OneWay}"
                                        leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                                        leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                                        leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                                        leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                                        leedep:ScrollViewerManager.TopContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.TopContent), Mode=OneWay}"
                                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropBackground), Mode=OneWay}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropBorderBrush), Mode=OneWay}"
                                        BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropBorderThinckness), Mode=OneWay}"
                                        CanContentScroll="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.CanContentScroll), Mode=OneWay}"
                                        Effect="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.DropEffect), Mode=OneWay}"
                                        HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.HorizontalScrollBarVisibility), Mode=OneWay}"
                                        PanningMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.PanningMode), Mode=OneWay}"
                                        Style="{StaticResource LeeScrollViewerEx}"
                                        VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.VerticalScrollBarVisibility), Mode=OneWay}"
                                        VirtualizingStackPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        VirtualizingStackPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                                        <ItemsPresenter KeyboardNavigation.ControlTabNavigation="Cycle" />
                                    </ScrollViewer>
                                </lee:EasyPanel>
                            </Popup>

                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="false" />
                            <ToggleButton
                                x:Name="toggleButton"
                                MinWidth="0"
                                MinHeight="0"
                                Padding="0,0,5,0"
                                HorizontalContentAlignment="Right"
                                Background="Transparent"
                                ClickMode="Release"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource RotateToggleButton}" />
                            <TextBox
                                x:Name="PART_EditableTextBox"
                                MinWidth="0"
                                MinHeight="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                leedep:TextBoxManager.EnterCommand="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.EnterCommand), Mode=OneWay}"
                                leedep:TextBoxManager.EscToEmpty="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ComboBoxManager.EscToEmpty), Mode=OneWay}"
                                BorderThickness="0"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                Style="{StaticResource ComboBoxEditableTextBox}"
                                Visibility="Collapsed" />

                            <ContentPresenter
                                x:Name="PART_Placeholder"
                                MinHeight="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Content="{Binding Path=(leedep:ComboBoxManager.Placeholder), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Mode=OneWay}"
                                IsHitTestVisible="False"
                                Visibility="Collapsed" />

                        </lee:EasyPanel>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="templateRoot" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />

                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="leedep:ComboBoxManager.IsDropCenterOnControl" Value="True">
                            <Setter TargetName="PART_Popup" Property="VerticalOffset">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToCenterConverter}" ConverterParameter="*-0.5">
                                        <MultiBinding.Bindings>
                                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                            <Binding ElementName="PART_DropPabnel" Path="ActualHeight" />
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsFocused}" Value="False" />
                                <Condition Binding="{Binding Path=SelectedItem, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" Value="{x:Null}" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ComboBoxManager.PlaceholderVisibility)}" Value="True" />
                                <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=Text, Converter={StaticResource StringIsNullConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition   SourceName="PART_EditableTextBox" Property="IsFocused" Value="False" />
                                <Condition Property="SelectedItem" Value="{x:Null}" />
                                <Condition Property="leedep:ComboBoxManager.ShowPreviewText" Value="True" />
                            </MultiTrigger.Conditions>
                           <Setter TargetName="prviewText" Property="Visibility" Value="Visible" />
                        </MultiTrigger>-->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=SelectedItem, Converter={StaticResource IsNotNullConverter}}" Value="True">
                            <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                            <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="LeeSeparator" TargetType="{x:Type Separator}">


        <Setter Property="Background" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Margin" Value="0,2" />
        <Setter Property="MinHeight" Value="1" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Fill="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="Padding" Value="{StaticResource LeeValue_Padding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="leedep:MenuItemManager.IconFontFamily" Value="{StaticResource IconFontFamily}" />
        <Setter Property="leedep:MenuItemManager.IconFontSize" Value="{StaticResource LeeValue_FontSize_Icon}" />
        <Setter Property="leedep:MenuItemManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:MenuItemManager.IconMinWidth" Value="{StaticResource LeeValue_MinWidth_Icon}" />
        <Setter Property="leedep:MenuItemManager.SubCornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:MenuItemManager.HighlightedBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:MenuItemManager.HighlightedForeground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="leedep:MenuItemManager.CheckedBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:MenuItemManager.CheckedBackground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:MenuItemManager.SubBackground" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="leedep:MenuItemManager.SubIsClip" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                        <Grid x:Name="PART_Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    x:Name="iconColumn"
                                    Width="auto"
                                    MinWidth="{Binding Path=(leedep:MenuItemManager.IconMinWidth), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                                <ColumnDefinition />
                                <ColumnDefinition
                                    x:Name="tagColumn"
                                    Width="auto"
                                    MinWidth="{Binding Path=(leedep:MenuItemManager.SubTagMinWidth), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            </Grid.ColumnDefinitions>
                            <controls:RippleMask
                                Grid.ColumnSpan="3"
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"
                                IsOverflow="False"
                                ParentElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                RippleBrush="{Binding Path=(leedep:MenuItemManager.RippleBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                            <ContentPresenter
                                x:Name="PART_IconContent"
                                HorizontalAlignment="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconHorizontalAlignment), Mode=OneWay}"
                                VerticalAlignment="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconVerticalAlignment), Mode=OneWay}"
                                ContentSource="Icon"
                                TextElement.FontFamily="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconFontFamily), Mode=OneWay}"
                                TextElement.FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconFontSize), Mode=OneWay}"
                                TextElement.FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconFontWeight), Mode=OneWay}"
                                TextElement.Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.IconForeground), Mode=OneWay}" />
                            <ContentPresenter
                                x:Name="PART_Presenter"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />
                            <Path
                                x:Name="PART_Path"
                                Grid.Column="2"
                                Width="5"
                                Height="10"
                                Margin="0,0,10,0"
                                HorizontalAlignment="Right"
                                Data="M0,0 L5,5 L0,10"
                                RenderTransformOrigin="0.5,0.5"
                                Stroke="{TemplateBinding Foreground}"
                                Visibility="Collapsed" />
                            <Popup
                                x:Name="PART_Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                HorizontalOffset="-20"
                                IsOpen="{TemplateBinding IsSubmenuOpen}"
                                Placement="Bottom"
                                PopupAnimation="Fade"
                                VerticalOffset="-20">
                                <Border Padding="20" Background="Transparent">
                                    <ScrollViewer
                                        x:Name="PART_Scroll"
                                        MaxHeight="600"
                                        Padding="{Binding Path=(leedep:MenuItemManager.SubPadding), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        leedep:CornerRadiusManager.CornerRadius="{Binding Path=(leedep:MenuItemManager.SubCornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        leedep:CornerRadiusManager.IsClip="{Binding Path=(leedep:MenuItemManager.SubIsClip), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        Background="{Binding Path=(leedep:MenuItemManager.SubBackground), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        BorderBrush="{Binding Path=(leedep:MenuItemManager.SubBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        BorderThickness="{Binding Path=(leedep:MenuItemManager.SubBorderThickness), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        CanContentScroll="True"
                                        Effect="{Binding Path=(leedep:MenuItemManager.SubEffect), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                        Style="{StaticResource LeeScrollViewer}"
                                        VirtualizingPanel.IsVirtualizing="True"
                                        VirtualizingPanel.VirtualizationMode="Recycling">
                                        <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Presenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_IconContent" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_Path" Property="Stroke" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.HighlightedForeground), Mode=OneWay}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Presenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_IconContent" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_Path" Property="Stroke" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:MenuItemManager.CheckedForeground), Mode=OneWay}" />
                        </Trigger>

                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter TargetName="PART_Path" Property="Visibility" Value="Collapsed" />
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="MinHeight" Value="0" />
                            <Setter TargetName="iconColumn" Property="MinWidth" Value="0" />
                            <Setter TargetName="tagColumn" Property="MinWidth" Value="0" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter TargetName="PART_Path" Property="Visibility" Value="Collapsed" />
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="MinHeight" Value="0" />
                            <Setter TargetName="iconColumn" Property="MinWidth" Value="0" />
                            <Setter TargetName="tagColumn" Property="MinWidth" Value="0" />
                        </Trigger>

                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="PART_Path" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Popup" Property="Placement" Value="Right" />
                        </Trigger>

                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter TargetName="PART_Path" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:MenuItemManager.SubScrollViewerStyle), Converter={StaticResource IsNullConverter}, Mode=OneWay}" Value="False">
                            <Setter TargetName="PART_Scroll" Property="Style" Value="{Binding RelativeSource={RelativeSource AncestorType=MenuItem}, Path=(leedep:MenuItemManager.SubScrollViewerStyle), Converter={StaticResource IsNullConverter}, Mode=OneWay}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeContextMenu" TargetType="{x:Type ContextMenu}">

        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />

        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="leedep:ContextMenuManager.ContentDock" Value="Bottom" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="8" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Effect" Value="{StaticResource LeeShadow}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="leedep:MenuItemManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:MenuItemManager.MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="leedep:MenuItemManager.MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="leedep:MenuItemManager.Background" Value="Transparent" />
        <Setter Property="leedep:MenuItemManager.BorderThickness" Value="0" />

        <Setter Property="leedep:MenuItemManager.IconFontFamily" Value="{StaticResource IconFontFamily}" />
        <Setter Property="leedep:MenuItemManager.IconFontSize" Value="{Binding Path=FontSize, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconFontWeight" Value="{Binding Path=FontWeight, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconForeground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconMinWidth" Value="{StaticResource LeeValue_MinWidth_Icon}" />
        <Setter Property="leedep:MenuItemManager.IconHorizontalAlignment" Value="Center" />
        <Setter Property="leedep:MenuItemManager.IconVerticalAlignment" Value="Center" />

        <Setter Property="leedep:MenuItemManager.HighlightedBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:MenuItemManager.HighlightedForeground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />

        <Setter Property="leedep:MenuItemManager.SubTagMinWidth" Value="{StaticResource LeeValue_MinWidth_Icon}" />
        <Setter Property="leedep:MenuItemManager.SubCornerRadius" Value="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.SubIsClip" Value="{Binding Path=(leedep:CornerRadiusManager.IsClip), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.SubBackground" Value="{Binding Path=Background, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.SubEffect" Value="{Binding Path=Effect, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />

        <Setter Property="leedep:MenuItemManager.SeparatorHeight" Value="1" />
        <Setter Property="leedep:MenuItemManager.SeparatorFill" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:MenuItemManager.SeparatorMargin" Value="10,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <lee:EasyPanel>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                        <DockPanel x:Name="contentDock">
                            <ContentPresenter Content="{Binding Path=(leedep:ContextMenuManager.Content), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" DockPanel.Dock="{Binding Path=(leedep:ContextMenuManager.ContentDock), RelativeSource={RelativeSource AncestorType=ContextMenu}, Mode=OneWay}" />
                            <ScrollViewer Padding="{TemplateBinding Padding}" Style="{StaticResource LeeScrollViewer}">
                                <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </DockPanel>
                    </lee:EasyPanel>
                    <ControlTemplate.Triggers>

                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="contentDock" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style BasedOn="{StaticResource LeeMenuItem}" TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="{Binding Path=(leedep:MenuItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(leedep:MenuItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="BorderThickness" Value="{Binding Path=(leedep:MenuItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="Margin" Value="{Binding Path=(leedep:MenuItemManager.Margin), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="MinHeight" Value="{Binding Path=(leedep:MenuItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="MinWidth" Value="{Binding Path=(leedep:MenuItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.RippleBrush" Value="{Binding Path=(leedep:MenuItemManager.RippleBrush), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CornerRadius" Value="{Binding Path=(leedep:MenuItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.IconFontFamily" Value="{Binding Path=(leedep:MenuItemManager.IconFontFamily), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconFontSize" Value="{Binding Path=(leedep:MenuItemManager.IconFontSize), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay, FallbackValue=12.0}" />
                <Setter Property="leedep:MenuItemManager.IconFontWeight" Value="{Binding Path=(leedep:MenuItemManager.IconFontWeight), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconForeground" Value="{Binding Path=(leedep:MenuItemManager.IconForeground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconMinWidth" Value="{Binding Path=(leedep:MenuItemManager.IconMinWidth), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconHorizontalAlignment" Value="{Binding Path=(leedep:MenuItemManager.IconHorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconVerticalAlignment" Value="{Binding Path=(leedep:MenuItemManager.IconVerticalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.HighlightedBackground" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedForeground" Value="{Binding Path=(leedep:MenuItemManager.HighlightedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />


                <Setter Property="leedep:MenuItemManager.CheckedBackground" Value="{Binding Path=(leedep:MenuItemManager.CheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.CheckedBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.CheckedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedForeground" Value="{Binding Path=(leedep:MenuItemManager.CheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.SubTagMinWidth" Value="{Binding Path=(leedep:MenuItemManager.SubTagMinWidth), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubCornerRadius" Value="{Binding Path=(leedep:MenuItemManager.SubCornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubIsClip" Value="{Binding Path=(leedep:MenuItemManager.SubIsClip), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBackground" Value="{Binding Path=(leedep:MenuItemManager.SubBackground), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubPadding" Value="{Binding Path=(leedep:MenuItemManager.SubPadding), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.SubBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.SubBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubEffect" Value="{Binding Path=(leedep:MenuItemManager.SubEffect), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubScrollViewerStyle" Value="{Binding Path=(leedep:MenuItemManager.SubScrollViewerStyle), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />

            </Style>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="OverridesDefaultStyle" Value="true" />


                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Rectangle
                                Height="{Binding Path=(leedep:MenuItemManager.SeparatorHeight), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}"
                                Margin="{Binding Path=(leedep:MenuItemManager.SeparatorMargin), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}"
                                Fill="{Binding Path=(leedep:MenuItemManager.SeparatorFill), RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Mode=OneWay}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=(leedep:MenuItemManager.SeparatorContent), Mode=OneWay, Converter={StaticResource IsNullConverter}}" Value="False">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Separator}">
                                    <ContentPresenter Content="{Binding Path=(leedep:MenuItemManager.SeparatorContent), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>

                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="LeeMenu" TargetType="{x:Type Menu}">


        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />

        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="leedep:MenuItemManager.RippleBrush" Value="{DynamicResource LeeBrush_RippleDefault}" />
        <Setter Property="leedep:MenuItemManager.MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="leedep:MenuItemManager.MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="leedep:MenuItemManager.Background" Value="Transparent" />
        <Setter Property="leedep:MenuItemManager.BorderThickness" Value="0" />

        <Setter Property="leedep:MenuItemManager.IconFontFamily" Value="{StaticResource IconFontFamily}" />
        <Setter Property="leedep:MenuItemManager.IconFontSize" Value="{Binding Path=FontSize, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconFontWeight" Value="{Binding Path=FontWeight, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconForeground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.IconMinWidth" Value="30" />
        <Setter Property="leedep:MenuItemManager.IconHorizontalAlignment" Value="Center" />
        <Setter Property="leedep:MenuItemManager.IconVerticalAlignment" Value="Center" />

        <Setter Property="leedep:MenuItemManager.HighlightedBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:MenuItemManager.HighlightedForeground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />

        <Setter Property="leedep:MenuItemManager.SubTagMinWidth" Value="30" />
        <Setter Property="leedep:MenuItemManager.SubCornerRadius" Value="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.SubIsClip" Value="{Binding Path=(leedep:CornerRadiusManager.IsClip), RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}" />
        <Setter Property="leedep:MenuItemManager.SubBackground" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="leedep:MenuItemManager.SubEffect" Value="{StaticResource LeeShadow}" />

        <Setter Property="leedep:MenuItemManager.SeparatorHeight" Value="1" />
        <Setter Property="leedep:MenuItemManager.SeparatorFill" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:MenuItemManager.SeparatorMargin" Value="10,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style BasedOn="{StaticResource LeeMenuItem}" TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="{Binding Path=(leedep:MenuItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(leedep:MenuItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="BorderThickness" Value="{Binding Path=(leedep:MenuItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="Margin" Value="{Binding Path=(leedep:MenuItemManager.Margin), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="MinHeight" Value="{Binding Path=(leedep:MenuItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="MinWidth" Value="{Binding Path=(leedep:MenuItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.RippleBrush" Value="{Binding Path=(leedep:MenuItemManager.RippleBrush), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CornerRadius" Value="{Binding Path=(leedep:MenuItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.IconFontFamily" Value="{Binding Path=(leedep:MenuItemManager.IconFontFamily), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconFontSize" Value="{Binding Path=(leedep:MenuItemManager.IconFontSize), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconFontWeight" Value="{Binding Path=(leedep:MenuItemManager.IconFontWeight), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconForeground" Value="{Binding Path=(leedep:MenuItemManager.IconForeground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconMinWidth" Value="{Binding Path=(leedep:MenuItemManager.IconMinWidth), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconHorizontalAlignment" Value="{Binding Path=(leedep:MenuItemManager.IconHorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.IconVerticalAlignment" Value="{Binding Path=(leedep:MenuItemManager.IconVerticalAlignment), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.HighlightedBackground" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBackground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.HighlightedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.HighlightedForeground" Value="{Binding Path=(leedep:MenuItemManager.HighlightedForeground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.CheckedBackground" Value="{Binding Path=(leedep:MenuItemManager.CheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.CheckedBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.CheckedBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.CheckedForeground" Value="{Binding Path=(leedep:MenuItemManager.CheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />

                <Setter Property="leedep:MenuItemManager.SubTagMinWidth" Value="{Binding Path=(leedep:MenuItemManager.SubTagMinWidth), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubCornerRadius" Value="{Binding Path=(leedep:MenuItemManager.SubCornerRadius), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubIsClip" Value="{Binding Path=(leedep:MenuItemManager.SubIsClip), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBackground" Value="{Binding Path=(leedep:MenuItemManager.SubBackground), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubPadding" Value="{Binding Path=(leedep:MenuItemManager.SubPadding), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBorderBrush" Value="{Binding Path=(leedep:MenuItemManager.SubBorderBrush), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubBorderThickness" Value="{Binding Path=(leedep:MenuItemManager.SubBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubEffect" Value="{Binding Path=(leedep:MenuItemManager.SubEffect), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                <Setter Property="leedep:MenuItemManager.SubScrollViewerStyle" Value="{Binding Path=(leedep:MenuItemManager.SubScrollViewerStyle), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />

                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock
                                x:Name="txtHeader"
                                Margin="3,1,5,1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}, Mode=FindAncestor}}"
                                Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}, Mode=FindAncestor}}"
                                Text="{Binding Header, RelativeSource={RelativeSource AncestorType={x:Type MenuItem}, Mode=FindAncestor}}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="OverridesDefaultStyle" Value="true" />


                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Rectangle
                                Height="{Binding Path=(leedep:MenuItemManager.SeparatorHeight), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}"
                                Margin="{Binding Path=(leedep:MenuItemManager.SeparatorMargin), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}"
                                Fill="{Binding Path=(leedep:MenuItemManager.SeparatorFill), RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Mode=OneWay}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Path=(leedep:MenuItemManager.SeparatorContent), Mode=OneWay, Converter={StaticResource IsNullConverter}}" Value="False">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Separator}">
                                    <ContentPresenter Content="{Binding Path=(leedep:MenuItemManager.SeparatorContent), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>

                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="LeeDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">



        <Setter Property="FontSize" Value="{Binding Path=(leedep:DataGridManager.HeaderFontSize), RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="FontWeight" Value="{Binding Path=(leedep:DataGridManager.HeaderFontWeight), RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <lee:EasyPanel Background="Transparent">
                        <StackPanel
                            HorizontalAlignment="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                            VerticalAlignment="{Binding Path=(leedep:DataGridManager.ColumnVerticalContentAlignment), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                            Orientation="Horizontal">
                            <ContentPresenter />
                            <ToggleButton
                                x:Name="PART_Sort"
                                Margin="2,0"
                                Foreground="{TemplateBinding Foreground}"
                                IsHitTestVisible="False"
                                Style="{DynamicResource RotateToggleButton}" />
                        </StackPanel>
                        <Thumb
                            x:Name="PART_LeftHeaderGripper"
                            Grid.ColumnSpan="3"
                            Width="2"
                            HorizontalAlignment="Left"
                            Cursor="SizeWE" />
                        <Thumb
                            x:Name="PART_RightHeaderGripper"
                            Grid.ColumnSpan="3"
                            Width="2"
                            HorizontalAlignment="Right"
                            Cursor="SizeWE" />
                    </lee:EasyPanel>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="False" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="False" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Descending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="IsChecked" Value="False" />

                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="False" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Ascending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="IsChecked" Value="True" />

                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding CanUserSortColumns, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" Value="False">
                            <Setter TargetName="PART_Sort" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="True" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="True" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Descending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="IsChecked" Value="False" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay, Converter={StaticResource NotAlignmentCenterConverter}}" Value="True" />
                                <Condition Binding="{Binding SortDirection, RelativeSource={RelativeSource Self}}" Value="Ascending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Sort" Property="IsChecked" Value="True" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="SortDirection" Value="{x:Null}">
                <Setter Property="Foreground" Value="{Binding Path=(leedep:DataGridManager.HeaderForeground), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LeeDataGridCell" TargetType="{x:Type DataGridCell}">



        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        x:Name="PART_Border"
                        Background="Transparent"
                        BorderThickness="0">
                        <ContentPresenter
                            x:Name="Presenter"
                            Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.CellPadding)}"
                            HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.ColumnHorizontalContentAlignment)}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.ColumnVerticalContentAlignment)}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" Value="CellOrRowHeader" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBorderBrush), Mode=OneWay}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" Value="Cell" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBorderBrush), Mode=OneWay}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(leedep:DataGridManager.SelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Converter={StaticResource IsNotNullConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{Binding Path=(leedep:DataGridManager.SelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=(leedep:DataGridManager.SelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                            <Setter Property="Foreground" Value="{Binding Path=(leedep:DataGridManager.SelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeeDataGridRow" TargetType="{x:Type DataGridRow}">



        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
        <Setter Property="MinHeight" Value="{Binding Path=(leedep:DataGridManager.RowMinHeight), RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border
                        x:Name="PART_Border"
                        Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowMargin), Mode=OneWay}"
                        Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowBackground), Mode=OneWay}"
                        BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowBorderBrush), Mode=OneWay}"
                        BorderThickness="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowBorderThickness), Mode=OneWay}"
                        CornerRadius="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowCornerRadius), Mode=OneWay}">

                        <SelectiveScrollingGrid x:Name="PART_Grid" Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowPadding), Mode=OneWay}">
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" />
                            <DataGridDetailsPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader
                                Grid.RowSpan="2"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowIsClip), Mode=OneWay}" Value="True">
                            <Setter TargetName="PART_Grid" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" Value="FullRow" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MouseOrverBorderBrush), Mode=OneWay}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding SelectionUnit, RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" Value="FullRow" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.SelectedBorderBrush), Mode=OneWay}" />
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=(leedep:DataGridManager.SelectedBackground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                            <Setter Property="Foreground" Value="{Binding Path=(leedep:DataGridManager.SelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeeDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">



        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <lee:EasyPanel>
                        <ContentPresenter
                            x:Name="PART_Content"
                            HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowHeaderHorizontalContentAlignment), Mode=OneWay}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.RowHeaderVerticalContentAlignment), Mode=OneWay}"
                            RecognizesAccessKey="True" />
                        <Thumb
                            x:Name="PART_TopHeaderGripper"
                            Height="2"
                            VerticalAlignment="Top"
                            Cursor="SizeNS" />

                        <Thumb
                            x:Name="PART_BottomHeaderGripper"
                            Height="2"
                            VerticalAlignment="Bottom"
                            Cursor="SizeNS" />
                    </lee:EasyPanel>



                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                            <Setter TargetName="PART_Content" Property="TextElement.Foreground" Value="{Binding Path=(leedep:DataGridManager.SelectedForeground), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}" />
                        </DataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeDataGrid" TargetType="{x:Type DataGrid}">

        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="RowHeaderWidth" Value="50" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="False" />
        <Setter Property="EnableColumnVirtualization" Value="True" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="leedep:DataGridManager.RowMargin" Value="0,2" />
        <Setter Property="leedep:DataGridManager.RowCornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:DataGridManager.RowIsClip" Value="True" />
        <Setter Property="leedep:DataGridManager.RowBackground" Value="{DynamicResource LeeBrush_Forground}" />


        <Setter Property="leedep:DataGridManager.RowHeaderVerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:DataGridManager.RowHeaderHorizontalContentAlignment" Value="Center" />
        <Setter Property="leedep:DataGridManager.CellPadding" Value="0" />
        <Setter Property="leedep:DataGridManager.RowMinHeight" Value="35" />
        <Setter Property="leedep:DataGridManager.HeaderMinHeight" Value="40" />
        <Setter Property="leedep:DataGridManager.ColumnVerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:DataGridManager.ColumnHorizontalContentAlignment" Value="Center" />
        <Setter Property="leedep:DataGridManager.SelectedBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:DataGridManager.SelectedForeground" Value="White" />
        <Setter Property="leedep:DataGridManager.MouseOrverForeground" Value="{x:Null}" />
        <Setter Property="leedep:DataGridManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:DataGridManager.HeaderBackground" Value="Transparent" />
        <Setter Property="leedep:DataGridManager.HeaderForeground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="leedep:DataGridManager.HeaderFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize}" />

        <Setter Property="leedep:DataGridManager.AutoGenerateImageStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Image}">
                    <Setter Property="MaxWidth" Value="100" />
                    <Setter Property="MaxHeight" Value="100" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="leedep:DataGridManager.TextColumnStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="leedep:DataGridManager.EditingTextColumnStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource LeeTextBox}" TargetType="{x:Type TextBox}">
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="MinHeight" Value="0" />
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="leedep:DataGridManager.ComboBoxColumnStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBox}">
                    <Setter Property="Focusable" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBox}">
                                <TextBlock
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding Text}"
                                    TextTrimming="CharacterEllipsis" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="leedep:DataGridManager.EditingComboBoxColumnStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource LeeComboBox}" TargetType="{x:Type ComboBox}">
                    <Setter Property="leedep:ComboBoxManager.IsDropCenterOnControl" Value="True" />
                    <Setter Property="MinHeight" Value="0" />
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="leedep:DataGridManager.CheckBoxColumnStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource LeeCheckBox}" TargetType="{x:Type CheckBox}">
                    <Setter Property="IsEnabled" Value="False" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="leedep:DataGridManager.EditingCheckBoxColumnStyle" Value="{StaticResource LeeCheckBox}" />
        <Setter Property="leedep:DataGridManager.ApplyAutoGeneratedStyle" Value="True" />

        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />

        <Setter Property="leedep:ScrollViewerManager.SlideEasingFunction" Value="{DynamicResource LeeValue_ScrollViewerSlideEasingFuncion}" />
        <Setter Property="leedep:ScrollViewerManager.SlideDuration" Value="{DynamicResource LeeValue_ScrollViewerSlideDuration}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEnabled" Value="False" />


        <Setter Property="RowValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        FontFamily="{StaticResource IconFontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        FontWeight="Bold"
                        Foreground="{DynamicResource LeeBrush_Error}"
                        Text=" &#xEB90;"
                        ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ColumnHeaderStyle" Value="{StaticResource LeeDataGridColumnHeader}" />
        <Setter Property="CellStyle" Value="{StaticResource LeeDataGridCell}" />
        <Setter Property="RowHeaderStyle" Value="{StaticResource LeeDataGridRowHeader}" />
        <Setter Property="RowStyle" Value="{StaticResource LeeDataGridRow}" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">

                        <ScrollViewer
                            x:Name="DG_ScrollViewer"
                            Margin="{TemplateBinding Padding}"
                            Focusable="false"
                            Style="{StaticResource LeeScrollViewer}">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Border
                                            x:Name="PART_HBorder"
                                            Margin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderMargin), Mode=OneWay}"
                                            Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderPadding), Mode=OneWay}"
                                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderBackground), Mode=OneWay}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderBorderBursh), Mode=OneWay}"
                                            BorderThickness="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderBorderThickness), Mode=OneWay}"
                                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderCornerRadius), Mode=OneWay}"
                                            Effect="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderEffect), Mode=OneWay}">
                                            <Grid x:Name="PART_HPanel">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <lee:EasyPanel Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}, AncestorLevel=1}}">
                                                    <CheckBox
                                                        x:Name="PART_CheckBox"
                                                        HorizontalAlignment="Center"
                                                        leedep:DataGridManager.CheckBoxHook="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"
                                                        FontFamily="{StaticResource IconFontFamily}"
                                                        Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}" />
                                                </lee:EasyPanel>
                                                <DataGridColumnHeadersPresenter
                                                    x:Name="PART_ColumnHeadersPresenter"
                                                    Grid.Column="1"
                                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <Rectangle
                                                    Grid.Column="2"
                                                    Width="8"
                                                    Visibility="{Binding ElementName=PART_VerticalScrollBar, Path=Visibility}" />
                                            </Grid>


                                        </Border>


                                        <Border
                                            x:Name="PART_MBorder"
                                            Grid.Row="1"
                                            Margin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainMargin), Mode=OneWay}"
                                            Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainPadding), Mode=OneWay}"
                                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainBackground), Mode=OneWay}"
                                            BorderBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainBorderBursh), Mode=OneWay}"
                                            BorderThickness="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainBorderThickness), Mode=OneWay}"
                                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainCornerRadius), Mode=OneWay}"
                                            Effect="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainEffect), Mode=OneWay}">
                                            <Grid x:Name="PART_MPanel">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="auto" />
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="auto" />
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter
                                                    Grid.Column="1"
                                                    HorizontalAlignment="Stretch"
                                                    VerticalAlignment="Stretch"
                                                    Content="{Binding Path=(leedep:DataGridManager.NoItemsContent), RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Mode=OneWay}"
                                                    Visibility="{Binding HasItems, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Converter={StaticResource VisibilityForBoolReverseConverter}}" />


                                                <ScrollContentPresenter
                                                    x:Name="PART_ScrollContentPresenter"
                                                    Grid.ColumnSpan="2"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}" />
                                                <ScrollBar
                                                    x:Name="PART_VerticalScrollBar"
                                                    Grid.Column="2"
                                                    Width="8"
                                                    Maximum="{TemplateBinding ScrollableHeight}"
                                                    Orientation="Vertical"
                                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                <Grid Grid.Row="1" Grid.Column="1">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                        <ColumnDefinition Width="*" />
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollBar
                                                        x:Name="PART_HorizontalScrollBar"
                                                        Grid.Column="1"
                                                        Height="8"
                                                        Maximum="{TemplateBinding ScrollableWidth}"
                                                        Orientation="Horizontal"
                                                        ViewportSize="{TemplateBinding ViewportWidth}"
                                                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                        Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Grid>

                                            </Grid>
                                        </Border>
                                    </Grid>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=SelectionMode}" Value="Single">
                                            <Setter TargetName="PART_CheckBox" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.HeaderIsClip)}" Value="True">
                                            <Setter TargetName="PART_HPanel" Property="Clip">
                                                <Setter.Value>
                                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                        <Binding
                                                            Mode="OneWay"
                                                            Path="ActualWidth"
                                                            RelativeSource="{RelativeSource Mode=Self}" />
                                                        <Binding
                                                            Mode="OneWay"
                                                            Path="ActualHeight"
                                                            RelativeSource="{RelativeSource Mode=Self}" />
                                                        <Binding
                                                            ElementName="PART_HBorder"
                                                            Mode="OneWay"
                                                            Path="CornerRadius" />
                                                        <Binding
                                                            ElementName="PART_HBorder"
                                                            Mode="OneWay"
                                                            Path="BorderThickness" />
                                                    </MultiBinding>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}, Path=(leedep:DataGridManager.MainIsClip)}" Value="True">
                                            <Setter TargetName="PART_MPanel" Property="Clip">
                                                <Setter.Value>
                                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                        <Binding
                                                            Mode="OneWay"
                                                            Path="ActualWidth"
                                                            RelativeSource="{RelativeSource Mode=Self}" />
                                                        <Binding
                                                            Mode="OneWay"
                                                            Path="ActualHeight"
                                                            RelativeSource="{RelativeSource Mode=Self}" />
                                                        <Binding
                                                            ElementName="PART_MBorder"
                                                            Mode="OneWay"
                                                            Path="CornerRadius" />
                                                        <Binding
                                                            ElementName="PART_MBorder"
                                                            Mode="OneWay"
                                                            Path="BorderThickness" />
                                                    </MultiBinding>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_Border" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="LeeDatePickerTextBoxTemplate" TargetType="{x:Type DatePickerTextBox}">
        <Grid>
            <Border
                x:Name="Border"
                Padding="{TemplateBinding Padding}"
                Background="Transparent"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Opacity="1">
                <lee:EasyPanel
                    x:Name="WatermarkContent"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Border
                        x:Name="ContentElement"
                        BorderBrush="#FFFFFFFF"
                        BorderThickness="0" />
                    <Border
                        x:Name="watermark_decorator"
                        BorderBrush="#FFFFFFFF"
                        BorderThickness="0">
                        <ContentControl
                            x:Name="PART_Watermark"
                            Padding="2"
                            Focusable="False"
                            IsHitTestVisible="False"
                            Opacity="0" />
                    </Border>
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Margin="0"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Style="{StaticResource LeeScrollViewer}" />

                </lee:EasyPanel>
            </Border>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="WatermarkStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Unwatermarked" />
                    <VisualState x:Name="Watermarked">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetName="ContentElement"
                                Storyboard.TargetProperty="Opacity"
                                To="0"
                                Duration="0" />
                            <DoubleAnimation
                                Storyboard.TargetName="PART_Watermark"
                                Storyboard.TargetProperty="Opacity"
                                To="1"
                                Duration="0" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Unfocused" />
                    <VisualState x:Name="Focused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="LeeDatePicker" TargetType="{x:Type DatePicker}">



        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="leedep:DatePickerManager.PopupAnimation" Value="Fade" />
        <Setter Property="leedep:DatePickerManager.ButtonWidth" Value="35" />
        <Setter Property="leedep:DatePickerManager.ButtonFontSize" Value="16" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="MinHeight" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource LeeCalendar}" TargetType="{x:Type Calendar}">
                    <Setter Property="Margin" Value="8,0,8,8" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border
                        x:Name="PART_Border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">

                        <Grid x:Name="PART_Root">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button
                                x:Name="PART_Button"
                                Grid.Column="1"
                                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:DatePickerManager.ButtonWidth), Mode=OneWay}"
                                HorizontalContentAlignment="Center"
                                Background="Transparent"
                                Content="&#xED28;"
                                Focusable="False"
                                FontFamily="{StaticResource IconFontFamily}"
                                FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:DatePickerManager.ButtonFontSize), Mode=OneWay}"
                                Foreground="{TemplateBinding Foreground}"
                                Style="{StaticResource LeeTextButton}" />
                            <DatePickerTextBox
                                x:Name="PART_TextBox"
                                Grid.Row="0"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="{TemplateBinding Focusable}"
                                FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}"
                                Foreground="{TemplateBinding Foreground}"
                                Template="{DynamicResource LeeDatePickerTextBoxTemplate}" />
                            <lee:EasyPanel
                                x:Name="PART_DisabledVisual"
                                Grid.Row="0"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                IsHitTestVisible="False"
                                Opacity="0">
                                <Popup
                                    x:Name="PART_Popup"
                                    AllowsTransparency="True"
                                    Placement="Bottom"
                                    PlacementTarget="{Binding ElementName=PART_TextBox}"
                                    PopupAnimation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:DatePickerManager.PopupAnimation), Mode=OneWay}"
                                    StaysOpen="False" />
                            </lee:EasyPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                            <Setter TargetName="PART_Root" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ExpanderDownTemplate" TargetType="{x:Type Expander}">
        <Border
            x:Name="PART_Border"
            VerticalAlignment="Stretch"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
            <Grid x:Name="PART_Grid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid Height="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        ContentSource="Header" />
                    <ToggleButton
                        x:Name="toggleButton"
                        Grid.ColumnSpan="2"
                        Padding="0,0,5,0"
                        HorizontalContentAlignment="Right"
                        Background="Transparent"
                        Foreground="{TemplateBinding Foreground}"
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource RotateToggleButton}" />
                </Grid>


                <ContentPresenter
                    x:Name="PART_Content"
                    Grid.Row="1"
                    Visibility="Collapsed" />
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                <Setter TargetName="PART_Grid" Property="Clip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                            <Binding
                                Mode="OneWay"
                                Path="ActualWidth"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                Mode="OneWay"
                                Path="ActualHeight"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="CornerRadius" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="BorderThickness" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsExpanded" Value="true">
                <Setter TargetName="PART_Content" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderUpTemplate" TargetType="{x:Type Expander}">
        <Border
            x:Name="PART_Border"
            VerticalAlignment="Bottom"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
            <Grid x:Name="PART_Grid">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>



                <ContentPresenter
                    x:Name="PART_Content"
                    Grid.Row="0"
                    Visibility="Collapsed" />

                <Grid
                    Grid.Row="1"
                    Height="{TemplateBinding MinHeight}"
                    Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        ContentSource="Header" />
                    <ToggleButton
                        x:Name="toggleButton"
                        Grid.ColumnSpan="2"
                        Padding="0,0,5,0"
                        HorizontalContentAlignment="Right"
                        Background="Transparent"
                        Content="&#xE70E;"
                        Foreground="{TemplateBinding Foreground}"
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource RotateToggleButton}" />
                </Grid>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                <Setter TargetName="PART_Grid" Property="Clip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                            <Binding
                                Mode="OneWay"
                                Path="ActualWidth"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                Mode="OneWay"
                                Path="ActualHeight"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="CornerRadius" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="BorderThickness" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsExpanded" Value="true">
                <Setter TargetName="PART_Content" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderLeftTemplate" TargetType="{x:Type Expander}">
        <Border
            x:Name="PART_Border"
            HorizontalAlignment="Left"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
            <Grid x:Name="PART_Grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid Width="{TemplateBinding MinWidth}" Background="{TemplateBinding Background}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="25" />
                    </Grid.RowDefinitions>
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        ContentSource="Header" />
                    <ToggleButton
                        x:Name="toggleButton"
                        Grid.RowSpan="2"
                        Padding="0,0,0,5"
                        VerticalContentAlignment="Bottom"
                        Background="Transparent"
                        Content="&#xE76C;"
                        Foreground="{TemplateBinding Foreground}"
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource RotateToggleButton}" />
                </Grid>


                <ContentPresenter
                    x:Name="PART_Content"
                    Grid.Column="1"
                    Visibility="Collapsed" />
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                <Setter TargetName="PART_Grid" Property="Clip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                            <Binding
                                Mode="OneWay"
                                Path="ActualWidth"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                Mode="OneWay"
                                Path="ActualHeight"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="CornerRadius" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="BorderThickness" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsExpanded" Value="true">
                <Setter TargetName="PART_Content" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderRightTemplate" TargetType="{x:Type Expander}">
        <Border
            x:Name="PART_Border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}">
            <Grid x:Name="PART_Grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>



                <ContentPresenter x:Name="PART_Content" Visibility="Collapsed" />

                <Grid
                    Grid.Column="1"
                    Width="{TemplateBinding MinWidth}"
                    Background="{TemplateBinding Background}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="25" />
                    </Grid.RowDefinitions>
                    <ContentPresenter
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        ContentSource="Header" />
                    <ToggleButton
                        x:Name="toggleButton"
                        Grid.RowSpan="2"
                        Padding="0,0,0,5"
                        VerticalContentAlignment="Bottom"
                        Background="Transparent"
                        Content="&#xE76D;"
                        Foreground="{TemplateBinding Foreground}"
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource RotateToggleButton}" />
                </Grid>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                <Setter TargetName="PART_Grid" Property="Clip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                            <Binding
                                Mode="OneWay"
                                Path="ActualWidth"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                Mode="OneWay"
                                Path="ActualHeight"
                                RelativeSource="{RelativeSource Mode=Self}" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="CornerRadius" />
                            <Binding
                                ElementName="PART_Border"
                                Mode="OneWay"
                                Path="BorderThickness" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsExpanded" Value="true">
                <Setter TargetName="PART_Content" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="LeeExpander" TargetType="{x:Type Expander}">



        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="{StaticResource LeeValue_MinHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="Template" Value="{StaticResource ExpanderDownTemplate}" />
        <Style.Triggers>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="Template" Value="{StaticResource ExpanderLeftTemplate}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="Template" Value="{StaticResource ExpanderUpTemplate}" />
                <Setter Property="Padding" Value="0,10" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">

                <Setter Property="Template" Value="{StaticResource ExpanderRightTemplate}" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
                <Setter Property="Padding" Value="0,10" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeGroupBox" TargetType="{x:Type GroupBox}">



        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{DynamicResource LeeValue_Padding}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:GroupBoxManager.HeaderPadding" Value="{DynamicResource LeeValue_Padding}" />
        <Setter Property="leedep:GroupBoxManager.HeaderForeground" Value="{Binding Foreground, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="leedep:GroupBoxManager.HeaderFontWeight" Value="Medium" />
        <Setter Property="leedep:GroupBoxManager.HeaderFontSize" Value="{Binding FontSize, RelativeSource={RelativeSource Self}, Converter={StaticResource DoubleFollowConverter}, ConverterParameter=3, Mode=OneWay}" />
        <Setter Property="leedep:GroupBoxManager.BorderMode" Value="Internal" />
        <Setter Property="leedep:GroupBoxManager.SplitLineSize" Value="1" />
        <Setter Property="leedep:GroupBoxManager.SplitLineBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:GroupBoxManager.SplitLineMargin" Value="1" />
        <Setter Property="leedep:GroupBoxManager.SplitLineVisibility" Value="Collapsed" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:GroupBoxManager.BorderMode), Mode=OneWay}" Value="External">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Border
                                x:Name="PART_Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}">
                                <Grid x:Name="PART_Grid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>

                                    <ContentPresenter
                                        x:Name="Header"
                                        Margin="{Binding Path=(leedep:GroupBoxManager.HeaderPadding), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        VerticalAlignment="Center"
                                        ContentSource="Header"
                                        TextBlock.FontSize="{Binding Path=(leedep:GroupBoxManager.HeaderFontSize), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        TextBlock.FontWeight="{Binding Path=(leedep:GroupBoxManager.HeaderFontWeight), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        TextBlock.Foreground="{Binding Path=(leedep:GroupBoxManager.HeaderForeground), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        TextElement.FontSize="{Binding Path=(leedep:GroupBoxManager.HeaderFontSize), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        TextElement.Foreground="{Binding Path=(leedep:GroupBoxManager.HeaderForeground), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}" />
                                    <Rectangle
                                        Grid.Row="1"
                                        Height="{Binding Path=(leedep:GroupBoxManager.SplitLineSize), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        Margin="{Binding Path=(leedep:GroupBoxManager.SplitLineMargin), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        Fill="{Binding Path=(leedep:GroupBoxManager.SplitLineBrush), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                        Visibility="{Binding Path=(leedep:GroupBoxManager.SplitLineVisibility), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}" />
                                    <ContentPresenter
                                        Grid.Row="2"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}" />

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                                    <Setter TargetName="PART_Grid" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                                <DataTrigger Binding="{Binding Header, Converter={StaticResource IsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>


                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:GroupBoxManager.BorderMode), Mode=OneWay}" Value="Internal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />

                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <ContentPresenter
                                    x:Name="Header"
                                    Margin="{Binding Path=(leedep:GroupBoxManager.HeaderPadding), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    TextBlock.FontSize="{Binding Path=(leedep:GroupBoxManager.HeaderFontSize), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    TextBlock.FontWeight="{Binding Path=(leedep:GroupBoxManager.HeaderFontWeight), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    TextBlock.Foreground="{Binding Path=(leedep:GroupBoxManager.HeaderForeground), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    TextElement.FontSize="{Binding Path=(leedep:GroupBoxManager.HeaderFontSize), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    TextElement.Foreground="{Binding Path=(leedep:GroupBoxManager.HeaderForeground), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}" />

                                <Border
                                    x:Name="PART_Border"
                                    Grid.Row="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(leedep:CornerRadiusManager.CornerRadius), RelativeSource={RelativeSource AncestorType=GroupBox}, Mode=OneWay}"
                                    Effect="{Binding Path=(leedep:GroupBoxManager.ContentEffect), RelativeSource={RelativeSource AncestorType=GroupBox}}">
                                    <ContentPresenter
                                        x:Name="PART_Content"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}" />
                                </Border>
                            </Grid>

                            <ControlTemplate.Triggers>

                                <Trigger Property="leedep:CornerRadiusManager.IsClip" Value="True">
                                    <Setter TargetName="PART_Content" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                                <DataTrigger Binding="{Binding Header, Converter={StaticResource IsNullConverter}, RelativeSource={RelativeSource Self}}" Value="True">
                                    <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="LeeListBoxItem" TargetType="{x:Type ListBoxItem}">



        <Style.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkShow)}" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border
                                x:Name="PART_Border"
                                MinWidth="{Binding Path=(leedep:ListItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                MinHeight="{Binding Path=(leedep:ListItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}">
                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                    HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                    VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.IsClip)}" Value="True">
                                    <Setter TargetName="contentPresenter" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkShow)}" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border
                                x:Name="PART_Border"
                                MinWidth="{Binding Path=(leedep:ListItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                MinHeight="{Binding Path=(leedep:ListItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}">
                                <DockPanel x:Name="PART_DockPanel">
                                    <Rectangle
                                        x:Name="PART_Mark"
                                        Margin="{Binding Path=(leedep:ListBoxItemManager.MarkMargin), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                        DockPanel.Dock="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSite), Mode=OneWay}"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkBrush), Mode=OneWay}"
                                        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkShow), Mode=OneWay, Converter={StaticResource VisibilityForBoolConverter}}">
                                        <Rectangle.Clip>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="(leedep:ListBoxItemManager.MarkCornerRadius)"
                                                    RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" />
                                            </MultiBinding>
                                        </Rectangle.Clip>
                                    </Rectangle>
                                    <ContentPresenter
                                        x:Name="contentPresenter"
                                        Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                        HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                                        VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" />
                                </DockPanel>
                            </Border>

                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.IsClip)}" Value="True">
                                    <Setter TargetName="contentPresenter" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(leedep:ListBoxItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" Value="Left">
                                    <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSize), Mode=OneWay}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(leedep:ListBoxItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" Value="Right">
                                    <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSize), Mode=OneWay}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(leedep:ListBoxItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" Value="Top">
                                    <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSize), Mode=OneWay}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(leedep:ListBoxItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" Value="Bottom">
                                    <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSize), Mode=OneWay}" />
                                </DataTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkMouseOverBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkMouseOverBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedMarigin), Mode=OneWay}" />
                                    <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListBoxItemManager.MarkSelectedBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </DataTrigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="LeeListBox" TargetType="{x:Type ListBox}">



        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="True" />
        <Setter Property="leedep:ListManager.Orientation" Value="Vertical" />
        <!--  常规属性  -->
        <Setter Property="leedep:ListItemManager.MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="leedep:ListItemManager.MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="leedep:ListItemManager.Background" Value="Transparent" />
        <Setter Property="leedep:ListItemManager.BorderBrush" Value="{x:Null}" />
        <Setter Property="leedep:ListItemManager.BorderThickness" Value="0" />
        <Setter Property="leedep:ListItemManager.Marigin" Value="0" />
        <Setter Property="leedep:ListItemManager.Padding" Value="0" />
        <Setter Property="leedep:ListItemManager.Effect" Value="{x:Null}" />

        <!--  MouseOver  -->
        <Setter Property="leedep:ListItemManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Selected  -->
        <Setter Property="leedep:ListItemManager.ActivateSelectedStyle" Value="True" />
        <Setter Property="leedep:ListItemManager.SelectedBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedForeground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:ListItemManager.SelectedMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Item的cornerRadius  -->
        <Setter Property="leedep:ListItemManager.CornerRadius" Value="0" />
        <Setter Property="leedep:ListItemManager.IsClip" Value="False" />

        <!--  Mark  -->
        <Setter Property="leedep:ListBoxItemManager.MarkShow" Value="False" />
        <Setter Property="leedep:ListBoxItemManager.MarkBrush" Value="Transparent" />
        <Setter Property="leedep:ListBoxItemManager.MarkCornerRadius" Value="2" />
        <Setter Property="leedep:ListBoxItemManager.MarkMargin" Value="2,4" />
        <Setter Property="leedep:ListBoxItemManager.MarkMouseOverBrush" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListBoxItemManager.MarkSelectedBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ListBoxItemManager.MarkSite" Value="Left" />
        <Setter Property="leedep:ListBoxItemManager.MarkSize" Value="4" />

        <Setter Property="leedep:ScrollViewerManager.SlideEasingFunction" Value="{DynamicResource LeeValue_ScrollViewerSlideEasingFuncion}" />
        <Setter Property="leedep:ScrollViewerManager.SlideDuration" Value="{DynamicResource LeeValue_ScrollViewerSlideDuration}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEnabled" Value="{DynamicResource LeeValue_ScrollViewerSlideEnabled}" />

        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Standard" />

        <Setter Property="ItemContainerStyle" Value="{StaticResource LeeListBoxItem}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel
                        IsItemsHost="True"
                        Orientation="{Binding Path=(leedep:ListManager.Orientation), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                        VirtualizingStackPanel.IsVirtualizing="{Binding Path=(VirtualizingPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"
                        VirtualizingStackPanel.VirtualizationMode="{Binding Path=(VirtualizingPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ScrollViewer
                        x:Name="scrollviewer"
                        Padding="{TemplateBinding Padding}"
                        leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                        leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CanContentScroll="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.CanContentScroll), Mode=OneWay}"
                        HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.HorizontalScrollBarVisibility), Mode=OneWay}"
                        IsDeferredScrollingEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.IsDeferredScrollingEnabled), Mode=OneWay}"
                        PanningMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.PanningMode), Mode=OneWay}"
                        Style="{StaticResource LeeScrollViewer}"
                        VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(ScrollViewer.VerticalScrollBarVisibility), Mode=OneWay}"
                        VirtualizingPanel.IsVirtualizing="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(VirtualizingPanel.IsVirtualizing), Mode=OneWay}"
                        VirtualizingPanel.VirtualizationMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(VirtualizingPanel.VirtualizationMode), Mode=OneWay}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <!--  背景  -->
                            <ContentPresenter
                                Grid.Row="0"
                                Grid.Column="0"
                                Content="{Binding Path=(leedep:ListManager.NoItemsContent), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                Visibility="{TemplateBinding HasItems,
                                                             Converter={StaticResource VisibilityForBoolReverseConverter}}" />

                            <ItemsPresenter Grid.Row="0" />
                            <!--  尾部  -->
                            <ContentPresenter
                                x:Name="PART_ListEnd"
                                Grid.Row="1"
                                Grid.Column="0"
                                Content="{Binding Path=(leedep:ListManager.ListEndContent), RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"
                                Visibility="{TemplateBinding HasItems,
                                                             Converter={StaticResource VisibilityForBoolConverter}}" />
                        </Grid>
                    </ScrollViewer>
                    <ControlTemplate.Triggers>
                        <Trigger Property="leedep:ListManager.Orientation" Value="Vertical">
                            <Setter TargetName="PART_ListEnd" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_ListEnd" Property="Grid.Column" Value="0" />
                        </Trigger>
                        <Trigger Property="leedep:ListManager.Orientation" Value="Horizontal">
                            <Setter TargetName="PART_ListEnd" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_ListEnd" Property="Grid.Column" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="leedep:ListManager.Orientation" Value="Vertical">
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            </Trigger>
            <Trigger Property="leedep:ListManager.Orientation" Value="Horizontal">
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeGridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}">


        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(leedep:ListViewManager.HeaderVerticalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(leedep:ListViewManager.HeaderHorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}" />

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <lee:EasyPanel>
                        <Border
                            x:Name="HeaderBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter
                                x:Name="HeaderContent"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                        </Border>

                        <Thumb
                            x:Name="PART_HeaderGripper"
                            Width="3"
                            Margin="0,4"
                            HorizontalAlignment="Right"
                            Background="Transparent"
                            Cursor="SizeWE" />
                    </lee:EasyPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeeListViewItem" TargetType="{x:Type ListViewItem}">



        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border
                        x:Name="PART_Border"
                        MinWidth="{Binding Path=(leedep:ListItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        MinHeight="{Binding Path=(leedep:ListItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                        Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}">
                        <GridViewRowPresenter
                            x:Name="contentPresenter"
                            Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                            HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                            VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                            Columns="{TemplateBinding GridView.ColumnCollection}"
                            Content="{TemplateBinding Content}" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.IsClip)}" Value="True">
                            <Setter TargetName="contentPresenter" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=View, Converter={StaticResource IsNullConverter}}" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border
                                x:Name="PART_Border"
                                MinWidth="{Binding Path=(leedep:ListItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                MinHeight="{Binding Path=(leedep:ListItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}">

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                    HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                    VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Mode=OneWay}"
                                    Content="{TemplateBinding Content}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.IsClip)}" Value="True">
                                    <Setter TargetName="contentPresenter" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_Border"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="False" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                        <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />
                                    <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                                    <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListView}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                                </MultiDataTrigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LeeListView" TargetType="{x:Type ListView}">



        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="leedep:ListViewManager.HeaderMargin" Value="3,0" />
        <Setter Property="leedep:ListViewManager.HeaderBorderThickness" Value="0,0,0,0" />
        <Setter Property="leedep:ListViewManager.HeaderBorderBursh" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListViewManager.HeaderFreeze" Value="True" />
        <Setter Property="leedep:ListViewManager.HeaderHorizontalAlignment" Value="Stretch" />
        <Setter Property="leedep:ListViewManager.HeaderVerticalAlignment" Value="Center" />


        <!--  常规属性  -->
        <Setter Property="leedep:ListItemManager.MinHeight" Value="35" />
        <Setter Property="leedep:ListItemManager.MinWidth" Value="{StaticResource LeeValue_MinWidth}" />
        <Setter Property="leedep:ListItemManager.Background" Value="{DynamicResource LeeBrush_Forground}" />
        <Setter Property="leedep:ListItemManager.BorderBrush" Value="{x:Null}" />
        <Setter Property="leedep:ListItemManager.BorderThickness" Value="0" />
        <Setter Property="leedep:ListItemManager.Marigin" Value="0,2,0,2" />
        <Setter Property="leedep:ListItemManager.Padding" Value="0" />
        <Setter Property="leedep:ListItemManager.Effect" Value="{x:Null}" />

        <!--  MouseOver  -->
        <Setter Property="leedep:ListItemManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Selected  -->
        <Setter Property="leedep:ListItemManager.ActivateSelectedStyle" Value="True" />
        <Setter Property="leedep:ListItemManager.SelectedBackground" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedForeground" Value="{DynamicResource LeeBrush_ThemeForeground}" />
        <Setter Property="leedep:ListItemManager.SelectedMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Item的cornerRadius  -->
        <Setter Property="leedep:ListItemManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:ListItemManager.IsClip" Value="False" />

        <Setter Property="leedep:ScrollViewerManager.SlideEasingFunction" Value="{DynamicResource LeeValue_ScrollViewerSlideEasingFuncion}" />
        <Setter Property="leedep:ScrollViewerManager.SlideDuration" Value="{DynamicResource LeeValue_ScrollViewerSlideDuration}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEnabled" Value="{DynamicResource LeeValue_ScrollViewerSlideEnabled}" />

        <Setter Property="ItemContainerStyle" Value="{StaticResource LeeListViewItem}" />

        <Style.Triggers>
            <Trigger Property="leedep:ListViewManager.HeaderFreeze" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Border
                                    x:Name="PART_HeaderBorder"
                                    Grid.ColumnSpan="2"
                                    Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderMargin), Mode=OneWay}"
                                    Padding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderPadding), Mode=OneWay}"
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBackground), Mode=OneWay}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBorderBursh), Mode=OneWay}"
                                    BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBorderThickness), Mode=OneWay}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderCornerRadius), Mode=OneWay}">
                                    <GridViewHeaderRowPresenter
                                        x:Name="PART_Header"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        AllowsColumnReorder="{Binding View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                        ColumnHeaderContainerStyle="{Binding View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                        ColumnHeaderContextMenu="{Binding View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                        ColumnHeaderTemplate="{Binding View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                        ColumnHeaderTemplateSelector="{Binding View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                        ColumnHeaderToolTip="{Binding View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                        Columns="{Binding View.Columns, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Border>
                                <ScrollViewer
                                    x:Name="PART_ScrollViewer"
                                    Grid.Row="1"
                                    Grid.ColumnSpan="2"
                                    leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                                    leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                                    leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                                    leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                                    leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                                    leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CanContentScroll="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.CanContentScroll), Mode=OneWay}"
                                    HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.HorizontalScrollBarVisibility), Mode=OneWay}"
                                    PanningMode="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.PanningMode), Mode=OneWay}"
                                    Style="{StaticResource LeeScrollViewer}"
                                    VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.VerticalScrollBarVisibility), Mode=OneWay}">
                                    <Grid Margin="{TemplateBinding Padding}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition Height="auto" />
                                        </Grid.RowDefinitions>

                                        <!--  背景  -->
                                        <ContentControl
                                            Grid.Row="0"
                                            Content="{Binding Path=(leedep:ListViewManager.NoItemsContent), RelativeSource={RelativeSource AncestorType={x:Type ListView}, AncestorLevel=1}, Mode=OneWay}"
                                            Visibility="{TemplateBinding HasItems,
                                                                         Converter={StaticResource VisibilityForBoolReverseConverter}}" />
                                        <ItemsPresenter />

                                        <!--  尾部  -->
                                        <ContentControl
                                            x:Name="PART_ListEnd"
                                            Grid.Row="1"
                                            Content="{Binding Path=(leedep:ListViewManager.ListEndContent), RelativeSource={RelativeSource AncestorType={x:Type ListView}, AncestorLevel=1}, Mode=OneWay}"
                                            Visibility="{TemplateBinding HasItems,
                                                                         Converter={StaticResource VisibilityForBoolConverter}}" />

                                    </Grid>
                                </ScrollViewer>
                            </Grid>
                            <ControlTemplate.Triggers>

                                <Trigger Property="leedep:ListViewManager.HeaderIsClip" Value="True">
                                    <Setter TargetName="PART_Header" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_HeaderBorder"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_HeaderBorder"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="leedep:ListViewManager.HeaderFreeze" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">

                            <ScrollViewer
                                x:Name="PART_ScrollViewer"
                                leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                                leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                                leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                                leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                                leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                                leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CanContentScroll="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.CanContentScroll), Mode=OneWay}"
                                HorizontalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.HorizontalScrollBarVisibility), Mode=OneWay}"
                                PanningMode="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.PanningMode), Mode=OneWay}"
                                Style="{StaticResource LeeScrollViewer}"
                                VerticalScrollBarVisibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}, Path=(ScrollViewer.VerticalScrollBarVisibility), Mode=OneWay}">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="auto" />
                                    </Grid.RowDefinitions>

                                    <Border
                                        x:Name="PART_HeaderBorder"
                                        Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderMargin), Mode=OneWay}"
                                        Padding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderPadding), Mode=OneWay}"
                                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBackground), Mode=OneWay}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBorderBursh), Mode=OneWay}"
                                        BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderBorderThickness), Mode=OneWay}"
                                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ListViewManager.HeaderCornerRadius), Mode=OneWay}">
                                        <GridViewHeaderRowPresenter
                                            x:Name="PART_Header"
                                            AllowsColumnReorder="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.AllowsColumnReorder)}"
                                            ColumnHeaderContainerStyle="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.ColumnHeaderContainerStyle)}"
                                            ColumnHeaderContextMenu="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.ColumnHeaderContextMenu)}"
                                            ColumnHeaderTemplate="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.ColumnHeaderTemplate)}"
                                            ColumnHeaderTemplateSelector="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.ColumnHeaderTemplateSelector)}"
                                            ColumnHeaderToolTip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.ColumnHeaderToolTip)}"
                                            Columns="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(GridView.Columns)}" />
                                    </Border>
                                    <!--  背景  -->
                                    <ContentControl
                                        Grid.Row="1"
                                        Content="{Binding Path=(leedep:ListViewManager.NoItemsContent), RelativeSource={RelativeSource AncestorType={x:Type ListView}, AncestorLevel=1}, Mode=OneWay}"
                                        Visibility="{TemplateBinding HasItems,
                                                                     Converter={StaticResource VisibilityForBoolReverseConverter}}" />
                                    <ItemsPresenter Grid.Row="1" />

                                    <!--  尾部  -->
                                    <ContentControl
                                        x:Name="PART_ListEnd"
                                        Grid.Row="2"
                                        Content="{Binding Path=(leedep:ListViewManager.ListEndContent), RelativeSource={RelativeSource AncestorType={x:Type ListView}, AncestorLevel=1}, Mode=OneWay}"
                                        Visibility="{TemplateBinding HasItems,
                                                                     Converter={StaticResource VisibilityForBoolConverter}}" />

                                </Grid>
                            </ScrollViewer>
                            <ControlTemplate.Triggers>

                                <Trigger Property="leedep:ListViewManager.HeaderIsClip" Value="True">
                                    <Setter TargetName="PART_Header" Property="Clip">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualWidth"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    Mode="OneWay"
                                                    Path="ActualHeight"
                                                    RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding
                                                    ElementName="PART_HeaderBorder"
                                                    Mode="OneWay"
                                                    Path="CornerRadius" />
                                                <Binding
                                                    ElementName="PART_HeaderBorder"
                                                    Mode="OneWay"
                                                    Path="BorderThickness" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeTreeViewItem" TargetType="{x:Type TreeViewItem}">



        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Mode=OneWay}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Mode=OneWay}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=FontWeight, Mode=OneWay}" />

        <Setter Property="leedep:TreeViewItemManager.SwitchWidth" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SwitchWidth), Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.SelectedMode" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedMode), Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.NoItemsModeParentSign" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.NoItemsModeParentSign), Mode=OneWay}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>


                        <Border
                            x:Name="PART_HeaderPanel"
                            Grid.ColumnSpan="2"
                            Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MinHeight), Mode=OneWay}"
                            Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.Margin), Mode=OneWay}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.CornerRadius), Mode=OneWay}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" MinWidth="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay, Converter={StaticResource TreeViewItemSeparateConverter}}" />
                                    <ColumnDefinition Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:TreeViewItemManager.SwitchWidth), Mode=OneWay}" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <Rectangle
                                    x:Name="PART_Mark"
                                    Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkSize), Mode=OneWay}"
                                    Margin="{Binding Path=(leedep:TreeViewItemManager.MarkMargin), RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Mode=OneWay}"
                                    HorizontalAlignment="Left"
                                    Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkBrush), Mode=OneWay}"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkShow), Mode=OneWay, Converter={StaticResource VisibilityForBoolConverter}}">
                                    <Rectangle.Clip>
                                        <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                            <Binding
                                                Mode="OneWay"
                                                Path="ActualWidth"
                                                RelativeSource="{RelativeSource Mode=Self}" />
                                            <Binding
                                                Mode="OneWay"
                                                Path="ActualHeight"
                                                RelativeSource="{RelativeSource Mode=Self}" />
                                            <Binding
                                                Mode="OneWay"
                                                Path="(leedep:TreeViewItemManager.MarkCornerRadius)"
                                                RelativeSource="{RelativeSource AncestorType={x:Type TreeView}}" />
                                        </MultiBinding>
                                    </Rectangle.Clip>
                                </Rectangle>

                                <ToggleButton
                                    x:Name="Expander"
                                    Grid.Column="1"
                                    leedep:ToggleButtonManager.RotateMode="Positive90"
                                    ClickMode="Press"
                                    Content="&#xE76C;"
                                    FontSize="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SwitchSize), Mode=OneWay}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                    Style="{StaticResource RotateToggleButton}" />
                                <ContentPresenter
                                    x:Name="PART_Header"
                                    Grid.Column="2"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Mode=OneWay}"
                                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Mode=OneWay}"
                                    ContentSource="Header" />
                            </Grid>
                        </Border>


                        <ItemsPresenter
                            x:Name="ItemsHost"
                            Grid.Row="1"
                            Grid.Column="1" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="PART_HeaderPanel" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkMouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_HeaderPanel" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MouseOverFontWeight), Mode=OneWay}" />
                        </Trigger>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="leedep:TreeViewItemManager.SelectedMode" Value="NoItems" />
                                <Condition Property="HasItems" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkSelectedBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_HeaderPanel" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="leedep:TreeViewItemManager.SelectedMode" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.MarkSelectedBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_HeaderPanel" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsExpanded" Value="true" />
                                <Condition Property="leedep:TreeViewItemManager.NoItemsModeParentSign" Value="True" />
                                <Condition Property="leedep:TreeViewItemManager.SelectedMode" Value="NoItems" />
                                <Condition Property="HasItems" Value="True" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="Expander" Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.NoItemsModeParentSignBrush), Mode=OneWay}" />
                            <Setter TargetName="Expander" Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.NoItemsModeParentSignBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="PART_Header" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TreeView}}, Path=(leedep:TreeViewItemManager.SelectedFontWeight), Mode=OneWay}" />
                        </MultiTrigger>



                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel VirtualizingPanel.IsVirtualizing="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LeeTreeView" TargetType="{x:Type TreeView}">



        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />

        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:CornerRadiusManager.IsClip" Value="False" />

        <Setter Property="leedep:TreeViewItemManager.Margin" Value="2" />
        <Setter Property="leedep:TreeViewItemManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="leedep:TreeViewItemManager.SwitchSize" Value="10" />
        <Setter Property="leedep:TreeViewItemManager.SwitchWidth" Value="20" />
        <Setter Property="leedep:TreeViewItemManager.MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />

        <Setter Property="leedep:TreeViewItemManager.SelectedCloseOhterMode" Value="None" />
        <Setter Property="leedep:TreeViewItemManager.SelectedMode" Value="Normal" />
        <Setter Property="leedep:TreeViewItemManager.NoItemsModeParentSign" Value="False" />

        <Setter Property="leedep:TreeViewItemManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:TreeViewItemManager.MouseOverFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.MouseOverFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />

        <Setter Property="leedep:TreeViewItemManager.SelectedBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:TreeViewItemManager.SelectedFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.SelectedFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:TreeViewItemManager.SelectedForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />

        <Setter Property="leedep:TreeViewItemManager.NoItemsModeParentSignBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <!--  Mark  -->
        <Setter Property="leedep:TreeViewItemManager.MarkShow" Value="True" />
        <Setter Property="leedep:TreeViewItemManager.MarkBrush" Value="Transparent" />
        <Setter Property="leedep:TreeViewItemManager.MarkCornerRadius" Value="2" />
        <Setter Property="leedep:TreeViewItemManager.MarkMargin" Value="0,5,5,5" />
        <Setter Property="leedep:TreeViewItemManager.MarkMouseOverBrush" Value="Transparent" />
        <Setter Property="leedep:TreeViewItemManager.MarkSelectedBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:TreeViewItemManager.MarkSize" Value="4" />

        <Setter Property="leedep:ScrollViewerManager.SlideEasingFunction" Value="{DynamicResource LeeValue_ScrollViewerSlideEasingFuncion}" />
        <Setter Property="leedep:ScrollViewerManager.SlideDuration" Value="{DynamicResource LeeValue_ScrollViewerSlideDuration}" />
        <Setter Property="leedep:ScrollViewerManager.SlideEnabled" Value="{DynamicResource LeeValue_ScrollViewerSlideEnabled}" />

        <Setter Property="ItemContainerStyle" Value="{StaticResource LeeTreeViewItem}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <ScrollViewer
                        x:Name="PART_ScrollViewer"
                        Padding="{TemplateBinding Padding}"
                        leedep:CornerRadiusManager.CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                        leedep:CornerRadiusManager.IsClip="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.IsClip), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                        leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CanContentScroll="false"
                        Focusable="false"
                        HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                        Style="{StaticResource LeeScrollViewer}"
                        VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                        <ItemsPresenter />
                    </ScrollViewer>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource LeeValue_DisableOpacity}" />
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="PART_ScrollViewer" Property="CanContentScroll" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LeeTabItem" TargetType="{x:Type TabItem}">



        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=FontWeight, Mode=OneWay}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border
                        x:Name="PART_Border"
                        MinWidth="{Binding Path=(leedep:ListItemManager.MinWidth), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        MinHeight="{Binding Path=(leedep:ListItemManager.MinHeight), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        Margin="{Binding Path=(leedep:ListItemManager.Marigin), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        Background="{Binding Path=(leedep:ListItemManager.Background), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        BorderBrush="{Binding Path=(leedep:ListItemManager.BorderBrush), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        BorderThickness="{Binding Path=(leedep:ListItemManager.BorderThickness), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        CornerRadius="{Binding Path=(leedep:ListItemManager.CornerRadius), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                        Effect="{Binding Path=(leedep:ListItemManager.Effect), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}">
                        <DockPanel x:Name="PART_DockPanel">
                            <Rectangle
                                x:Name="PART_Mark"
                                Margin="{Binding Path=(leedep:TabItemManager.MarkMargin), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                DockPanel.Dock="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSite), Mode=OneWay}"
                                Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkBrush), Mode=OneWay}"
                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkShow), Mode=OneWay, Converter={StaticResource VisibilityForBoolConverter}}">
                                <Rectangle.Clip>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="(leedep:TabItemManager.MarkCornerRadius)"
                                            RelativeSource="{RelativeSource AncestorType={x:Type TabControl}}" />
                                    </MultiBinding>
                                </Rectangle.Clip>
                            </Rectangle>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="{Binding Path=(leedep:ListItemManager.Padding), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                HorizontalAlignment="{Binding Path=(leedep:TabItemManager.HorizontalAlignment), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                VerticalAlignment="{Binding Path=(leedep:TabItemManager.VerticalAlignment), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                ContentSource="Header" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.IsClip)}" Value="True">
                            <Setter TargetName="contentPresenter" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:TabItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}" Value="Left">
                            <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:TabItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}" Value="Right">
                            <Setter TargetName="PART_Mark" Property="Width" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:TabItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}" Value="Top">
                            <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(leedep:TabItemManager.MarkSite), RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Mode=OneWay}" Value="Bottom">
                            <Setter TargetName="PART_Mark" Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSize), Mode=OneWay}" />
                        </DataTrigger>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkMouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkMouseOverBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverBorderThickness), Mode=OneWay}" />

                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverPadding), Mode=OneWay}" />
                        </MultiDataTrigger>


                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.ActivateSelectedStyle), Mode=OneWay}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_Border" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.MouseOverMarigin), Mode=OneWay}" />
                            <Setter TargetName="PART_Mark" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:TabItemManager.MarkSelectedBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedBackground), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedBorderBrush), Mode=OneWay}" />
                            <Setter TargetName="PART_Border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedBorderThickness), Mode=OneWay}" />

                            <Setter TargetName="PART_Border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedEffect), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedForeground), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedFontSize), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.FontWeight" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedFontWeight), Mode=OneWay}" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabControl}}, Path=(leedep:ListItemManager.SelectedPadding), Mode=OneWay}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LeeTabControl" TargetType="{x:Type TabControl}">

        <Setter Property="BorderThickness" Value="{StaticResource LeeValue_BorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:CornerRadiusManager.CornerRadius" Value="{DynamicResource LeeValue_CornerRadius}" />
        <Setter Property="Foreground" Value="{DynamicResource LeeBrush_Text}" />
        <Setter Property="FontSize" Value="{StaticResource LeeValue_FontSize}" />
        <Setter Property="TabStripPlacement" Value="Top" />


        <!--  常规属性  -->
        <Setter Property="leedep:ListItemManager.MinHeight" Value="{StaticResource LeeValue_MinHeight_Item}" />
        <Setter Property="leedep:ListItemManager.MinWidth" Value="50" />
        <Setter Property="leedep:ListItemManager.Background" Value="Transparent" />
        <Setter Property="leedep:ListItemManager.BorderBrush" Value="{x:Null}" />
        <Setter Property="leedep:ListItemManager.BorderThickness" Value="0" />
        <Setter Property="leedep:ListItemManager.Marigin" Value="0" />
        <Setter Property="leedep:ListItemManager.Padding" Value="10,0" />
        <Setter Property="leedep:ListItemManager.Effect" Value="{x:Null}" />

        <!--  MouseOver  -->
        <Setter Property="leedep:ListItemManager.MouseOverBackground" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderBrush" Value="{DynamicResource LeeBrush_BorderBrush}" />
        <Setter Property="leedep:ListItemManager.MouseOverBorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.BorderThickness), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.MouseOverPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Selected  -->
        <Setter Property="leedep:ListItemManager.ActivateSelectedStyle" Value="True" />
        <Setter Property="leedep:ListItemManager.SelectedBackground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Background), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:ListItemManager.SelectedBorderThickness" Value="0,0,0,2" />
        <Setter Property="leedep:ListItemManager.SelectedEffect" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Effect), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontSize" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontSize, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedFontWeight" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=FontWeight, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedForeground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground, Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedMarigin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Marigin), Mode=OneWay}" />
        <Setter Property="leedep:ListItemManager.SelectedPadding" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(leedep:ListItemManager.Padding), Mode=OneWay}" />

        <!--  Item的cornerRadius  -->
        <Setter Property="leedep:ListItemManager.CornerRadius" Value="0" />
        <Setter Property="leedep:ListItemManager.IsClip" Value="False" />


        <Setter Property="leedep:TabItemManager.IsHeaderScroll" Value="False" />
        <Setter Property="leedep:TabItemManager.HorizontalAlignment" Value="Center" />
        <Setter Property="leedep:TabItemManager.VerticalAlignment" Value="Center" />
        <Setter Property="leedep:TabItemManager.MarkShow" Value="False" />
        <Setter Property="leedep:TabItemManager.MarkBrush" Value="Transparent" />
        <Setter Property="leedep:TabItemManager.MarkCornerRadius" Value="3" />
        <Setter Property="leedep:TabItemManager.MarkMargin" Value="0,4" />
        <Setter Property="leedep:TabItemManager.MarkMouseOverBrush" Value="{DynamicResource LeeBrush_Mark}" />
        <Setter Property="leedep:TabItemManager.MarkSelectedBrush" Value="{DynamicResource LeeBrush_Theme}" />
        <Setter Property="leedep:TabItemManager.MarkSite" Value="Bottom" />
        <Setter Property="leedep:TabItemManager.MarkSize" Value="4" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel
                        IsItemsHost="True"
                        VirtualizingStackPanel.IsVirtualizing="True"
                        VirtualizingStackPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource LeeTabItem}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <DockPanel>
                        <ScrollViewer
                            x:Name="PART_ScrollViewer"
                            leedep:ScrollViewerManager.BottomContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.BottomContent), Mode=OneWay}"
                            leedep:ScrollViewerManager.LeftContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.LeftContent), Mode=OneWay}"
                            leedep:ScrollViewerManager.RightContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.RightContent), Mode=OneWay}"
                            leedep:ScrollViewerManager.SlideDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideDuration), Mode=OneWay}"
                            leedep:ScrollViewerManager.SlideEasingFunction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEasingFunction), Mode=OneWay}"
                            leedep:ScrollViewerManager.SlideEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideEnabled), Mode=OneWay}"
                            leedep:ScrollViewerManager.SlideMonitorMode="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.SlideMonitorMode), Mode=OneWay}"
                            leedep:ScrollViewerManager.TopContent="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:ScrollViewerManager.TopContent), Mode=OneWay}"
                            DockPanel.Dock="{TemplateBinding TabStripPlacement}"
                            HorizontalScrollBarVisibility="Disabled"
                            Style="{StaticResource LeeScrollViewerEx}"
                            VerticalScrollBarVisibility="Disabled">
                            <TabPanel
                                x:Name="headerPanel"
                                Grid.Row="0"
                                Margin="0"
                                Panel.ZIndex="1"
                                IsItemsHost="true"
                                KeyboardNavigation.TabIndex="1" />
                        </ScrollViewer>

                        <Border
                            x:Name="PART_Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            ClipToBounds="true"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(leedep:CornerRadiusManager.CornerRadius), Mode=OneWay}"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Local">

                            <ContentPresenter
                                x:Name="PART_SelectedContentHost"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                ContentSource="SelectedContent" />

                        </Border>
                    </DockPanel>

                    <ControlTemplate.Triggers>

                        <Trigger Property="leedep:ListViewManager.HeaderIsClip" Value="True">
                            <Setter TargetName="PART_Border" Property="Clip">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MultiValueToClipConverter}" Mode="OneWay">
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualWidth"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            Mode="OneWay"
                                            Path="ActualHeight"
                                            RelativeSource="{RelativeSource Mode=Self}" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="CornerRadius" />
                                        <Binding
                                            ElementName="PART_Border"
                                            Mode="OneWay"
                                            Path="BorderThickness" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabStripPlacement" Value="Bottom" />
                                <Condition Property="leedep:TabItemManager.IsHeaderScroll" Value="True" />

                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Hidden" />
                        </MultiTrigger>



                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TabStripPlacement" Value="Top" />
                                <Condition Property="leedep:TabItemManager.IsHeaderScroll" Value="True" />

                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Hidden" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  默认替换  -->
    <Style BasedOn="{StaticResource LeeGridSplitter}" TargetType="GridSplitter" />
    <Style BasedOn="{StaticResource LeeButton}" TargetType="Button" />
    <Style BasedOn="{StaticResource LeeRepeatButton}" TargetType="RepeatButton" />
    <Style BasedOn="{StaticResource LeeCheckBox}" TargetType="CheckBox" />


    <Style BasedOn="{StaticResource LeeScrollViewer}" TargetType="ScrollViewer" />

    <Style BasedOn="{StaticResource LeeSeparator}" TargetType="Separator" />

    <Style BasedOn="{StaticResource LeeMenuItem}" TargetType="MenuItem" />
    <Style BasedOn="{StaticResource LeeMenu}" TargetType="Menu" />
    <Style BasedOn="{StaticResource LeeContextMenu}" TargetType="ContextMenu" />

    <Style BasedOn="{StaticResource LeeToggleButton}" TargetType="ToggleButton" />

    <Style BasedOn="{StaticResource LeeComboBoxItem}" TargetType="ComboBoxItem" />
    <Style BasedOn="{StaticResource LeeComboBox}" TargetType="ComboBox" />

    <Style BasedOn="{StaticResource LeeRadioButton}" TargetType="RadioButton" />

    <Style BasedOn="{StaticResource LeeListBoxItem}" TargetType="ListBoxItem" />
    <Style BasedOn="{StaticResource LeeListBox}" TargetType="ListBox" />

    <Style BasedOn="{StaticResource LeeGridViewColumnHeader}" TargetType="GridViewColumnHeader" />

    <Style BasedOn="{StaticResource LeeListViewItem}" TargetType="ListViewItem" />
    <Style BasedOn="{StaticResource LeeListView}" TargetType="ListView" />

    <Style BasedOn="{StaticResource LeeDataGrid}" TargetType="DataGrid" />
    <Style BasedOn="{StaticResource LeeSlider}" TargetType="Slider" />
    <Style BasedOn="{StaticResource LeeGroupBox}" TargetType="GroupBox" />
    <Style BasedOn="{StaticResource LeeTextBox}" TargetType="TextBox" />
    <Style BasedOn="{StaticResource LeePasswordBox}" TargetType="PasswordBox" />
    <Style BasedOn="{StaticResource LeeCalendar}" TargetType="Calendar" />
    <Style BasedOn="{StaticResource LeeDatePicker}" TargetType="DatePicker" />
    <Style BasedOn="{StaticResource LeeToolTip}" TargetType="ToolTip" />
    <Style BasedOn="{StaticResource LeeThumb}" TargetType="Thumb" />
    <Style BasedOn="{StaticResource LeeExpander}" TargetType="Expander" />

    <Style BasedOn="{StaticResource LeeTreeViewItem}" TargetType="TreeViewItem" />
    <Style BasedOn="{StaticResource LeeTreeView}" TargetType="TreeView" />

    <Style BasedOn="{StaticResource LeeTabItem}" TargetType="TabItem" />
    <Style BasedOn="{StaticResource LeeTabControl}" TargetType="TabControl" />





</ResourceDictionary>